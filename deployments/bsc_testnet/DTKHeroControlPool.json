{
  "address": "0x0dd28e1C311f5B89A3070009CF6842cA28Cb8943",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_authSigner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "hasPlayerId",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "playerId",
          "type": "uint256"
        }
      ],
      "name": "OnDtkHeroDeposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "erc721",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "OnERC721Received",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "erc721Address",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "TransferERC721",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "name": "WithdrawDTKHero",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "authSigner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "walletAddress",
          "type": "address"
        }
      ],
      "name": "currentNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "depositInfoOfDtkHero",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "depositor",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "hasPlayerId",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "playerId",
              "type": "uint256"
            }
          ],
          "internalType": "struct DepositInfo",
          "name": "depositInfo",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDtkHeroAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "erc721Address",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferERC721",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "sig",
          "type": "bytes"
        }
      ],
      "name": "withdrawDTKHero",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xbea48e6fb543cc62e3796f57f0bef3d32a3bfd8f83008f82511577031950bd98",
  "receipt": {
    "to": null,
    "from": "0x7d14F396d347C960bC2774141D51DA59Be408F71",
    "contractAddress": "0x0dd28e1C311f5B89A3070009CF6842cA28Cb8943",
    "transactionIndex": 0,
    "gasUsed": "944040",
    "logsBloom": "0x000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000010000002000000000000000000000000000000200000000000000000008000000000000000000000000000000404000000000000000000a0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x53ef8b83f5e08f25b0c1a3b11f309b12b55765e275894813194080f33b1ab7e5",
    "transactionHash": "0xbea48e6fb543cc62e3796f57f0bef3d32a3bfd8f83008f82511577031950bd98",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 24811412,
        "transactionHash": "0xbea48e6fb543cc62e3796f57f0bef3d32a3bfd8f83008f82511577031950bd98",
        "address": "0x0dd28e1C311f5B89A3070009CF6842cA28Cb8943",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007d14f396d347c960bc2774141d51da59be408f71"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x53ef8b83f5e08f25b0c1a3b11f309b12b55765e275894813194080f33b1ab7e5"
      }
    ],
    "blockNumber": 24811412,
    "cumulativeGasUsed": "944040",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2179Bf678f133ee45574888561Abe1Ec414a7BAF",
    "0x7d14F396d347C960bC2774141D51DA59Be408F71"
  ],
  "numDeployments": 2,
  "solcInputHash": "5148b691ffb375ece70698b3942399ca",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_authSigner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"hasPlayerId\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"playerId\",\"type\":\"uint256\"}],\"name\":\"OnDtkHeroDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"erc721\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"OnERC721Received\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"erc721Address\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"TransferERC721\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"WithdrawDTKHero\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"authSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"}],\"name\":\"currentNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"depositInfoOfDtkHero\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"hasPlayerId\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"playerId\",\"type\":\"uint256\"}],\"internalType\":\"struct DepositInfo\",\"name\":\"depositInfo\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDtkHeroAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc721Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"withdrawDTKHero\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DTKHeroControlPool.sol\":\"DTKHeroControlPool\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x0108bf6a6ebd5f96678bed33a35947537263f96766131ee91461fb6485805028\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. It the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`.\\n        // We also know that `k`, the position of the most significant bit, is such that `msb(a) = 2**k`.\\n        // This gives `2**k < a <= 2**(k+1)` \\u2192 `2**(k/2) <= sqrt(a) < 2 ** (k/2+1)`.\\n        // Using an algorithm similar to the msb conmputation, we are able to compute `result = 2**(k/2)` which is a\\n        // good first aproximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1;\\n        uint256 x = a;\\n        if (x >> 128 > 0) {\\n            x >>= 128;\\n            result <<= 64;\\n        }\\n        if (x >> 64 > 0) {\\n            x >>= 64;\\n            result <<= 32;\\n        }\\n        if (x >> 32 > 0) {\\n            x >>= 32;\\n            result <<= 16;\\n        }\\n        if (x >> 16 > 0) {\\n            x >>= 16;\\n            result <<= 8;\\n        }\\n        if (x >> 8 > 0) {\\n            x >>= 8;\\n            result <<= 4;\\n        }\\n        if (x >> 4 > 0) {\\n            x >>= 4;\\n            result <<= 2;\\n        }\\n        if (x >> 2 > 0) {\\n            result <<= 1;\\n        }\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = sqrt(a);\\n        if (rounding == Rounding.Up && result * result < a) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xd15c3e400531f00203839159b2b8e7209c5158b35618f570c695b7e47f12e9f0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/DTKHeroControlPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\nstruct DepositInfo {\\n    address depositor;\\n    bool hasPlayerId;\\n    uint256 playerId;\\n}\\n\\ncontract DTKHeroControlPool is Ownable, ERC721Holder {\\n    IERC721 immutable _dtkHero;\\n\\n    event OnERC721Received(\\n        address indexed erc721,\\n        address indexed operator,\\n        address from,\\n        uint256 indexed tokenId\\n    );\\n    event OnDtkHeroDeposited(\\n        address indexed depositor,\\n        uint256 indexed tokenId,\\n        bool hasPlayerId,\\n        uint256 playerId\\n    );\\n    event WithdrawDTKHero(\\n        address indexed operator,\\n        uint256 tokenId,\\n        uint256 nonce\\n    );\\n    event TransferERC721(\\n        address indexed erc721Address,\\n        address indexed to,\\n        uint256 indexed tokenId\\n    );\\n\\n    mapping(uint256 => DepositInfo) private _depositedDtkHero;\\n\\n    // for signature control\\n    address public authSigner;\\n    mapping(address => uint256) sigNonces; // all the nonces consumed by each address\\n\\n    constructor(address nftAddress, address _authSigner) {\\n        require(nftAddress != address(0), \\\"Invalid Token Address\\\");\\n        require(_authSigner != address(0), \\\"Invalid addr\\\");\\n\\n        _dtkHero = IERC721(nftAddress);\\n        authSigner = _authSigner;\\n    }\\n\\n    function bytesToUint(bytes memory b) internal pure returns (uint256) {\\n        uint256 number;\\n        for (uint256 i = 0; i < b.length; i++) {\\n            number =\\n                number +\\n                uint256(uint8(b[i])) *\\n                (2**(8 * (b.length - (i + 1))));\\n        }\\n        return number;\\n    }\\n\\n    function splitSignature(bytes memory sig)\\n        internal\\n        pure\\n        returns (\\n            uint8,\\n            bytes32,\\n            bytes32\\n        )\\n    {\\n        require(sig.length == 65, \\\"Invalid signature\\\");\\n\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        assembly {\\n            r := mload(add(sig, 32))\\n            s := mload(add(sig, 64))\\n            v := byte(0, mload(add(sig, 96)))\\n        }\\n\\n        return (v, r, s);\\n    }\\n\\n    function prefixed(bytes32 hash) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash)\\n            );\\n    }\\n\\n    function recoverSigner(bytes32 message, bytes memory sig)\\n        internal\\n        pure\\n        returns (address)\\n    {\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n\\n        (v, r, s) = splitSignature(sig);\\n        return ecrecover(message, v, r, s);\\n    }\\n\\n    function _validateHash(\\n        string memory _methodIdentifier,\\n        address _address,\\n        uint256 _nonce,\\n        bytes memory sig\\n    ) internal view returns (bool) {\\n        bytes32 msgHash = prefixed(\\n            keccak256(\\n                abi.encodePacked(\\n                    _methodIdentifier,\\n                    address(this),\\n                    _address,\\n                    _nonce\\n                )\\n            )\\n        );\\n        return recoverSigner(msgHash, sig) == authSigner;\\n    }\\n\\n    function _validateHashWithTokenId(\\n        string memory _methodIdentifier,\\n        address _address,\\n        uint256 _tokenId,\\n        uint256 _nonce,\\n        bytes memory sig\\n    ) internal view returns (bool) {\\n        bytes32 msgHash = prefixed(\\n            keccak256(\\n                abi.encodePacked(\\n                    _methodIdentifier,\\n                    address(this),\\n                    _address,\\n                    _tokenId,\\n                    _nonce\\n                )\\n            )\\n        );\\n        return recoverSigner(msgHash, sig) == authSigner;\\n    }\\n\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override returns (bytes4) {\\n        if (_msgSender() == address(_dtkHero)) {\\n            bool hasPlayerId = data.length != 0;\\n            uint256 playerId = bytesToUint(data);\\n\\n            DepositInfo storage depositInfo = _depositedDtkHero[tokenId];\\n            depositInfo.depositor = operator;\\n            depositInfo.hasPlayerId = hasPlayerId;\\n            depositInfo.playerId = playerId;\\n\\n            emit OnDtkHeroDeposited(operator, tokenId, hasPlayerId, playerId);\\n        }\\n        emit OnERC721Received(_msgSender(), operator, from, tokenId);\\n        return super.onERC721Received(operator, from, tokenId, data);\\n    }\\n\\n    function currentNonce(address walletAddress) public view returns (uint256) {\\n        return sigNonces[walletAddress];\\n    }\\n\\n    function getDtkHeroAddress() external view returns (address) {\\n        return address(_dtkHero);\\n    }\\n\\n    function depositInfoOfDtkHero(uint256 tokenId)\\n        external\\n        view\\n        returns (DepositInfo memory depositInfo)\\n    {\\n        return _depositedDtkHero[tokenId];\\n    }\\n\\n    function transferERC721(\\n        address erc721Address,\\n        address to,\\n        uint256 tokenId\\n    ) external onlyOwner {\\n        if (erc721Address == address(_dtkHero)) {\\n            DepositInfo storage depositInfo = _depositedDtkHero[tokenId];\\n\\n            depositInfo.depositor = address(0);\\n            depositInfo.hasPlayerId = false;\\n            depositInfo.playerId = 0;\\n\\n            _dtkHero.safeTransferFrom(address(this), to, tokenId);\\n        } else {\\n            IERC721(erc721Address).safeTransferFrom(\\n                address(this),\\n                to,\\n                tokenId,\\n                \\\"\\\"\\n            );\\n        }\\n        emit TransferERC721(erc721Address, to, tokenId);\\n    }\\n\\n    modifier withdrawDTKHeroCompliance(\\n        uint256 tokenId,\\n        address wallet,\\n        uint256 nonce,\\n        bytes memory sig\\n    ) {\\n        require(\\n            _depositedDtkHero[tokenId].depositor != address(0),\\n            \\\"Token has not been deposited yet\\\"\\n        );\\n        require(_depositedDtkHero[tokenId].depositor == wallet, \\\"Unauthorized\\\");\\n        require(currentNonce(wallet) == nonce, \\\"Invalid nonce\\\");\\n\\n        require(\\n            _validateHashWithTokenId(\\n                \\\"withdrawDTKHero(uint256,uint256,bytes)\\\",\\n                wallet,\\n                tokenId,\\n                nonce,\\n                sig\\n            ),\\n            \\\"Invalid signature\\\"\\n        );\\n        _;\\n    }\\n\\n    function withdrawDTKHero(\\n        uint256 tokenId,\\n        uint256 _nonce,\\n        bytes memory sig\\n    ) external withdrawDTKHeroCompliance(tokenId, _msgSender(), _nonce, sig) {\\n        DepositInfo storage depositInfo = _depositedDtkHero[tokenId];\\n\\n        depositInfo.depositor = address(0);\\n        depositInfo.hasPlayerId = false;\\n        depositInfo.playerId = 0;\\n\\n        // increment nonce\\n        sigNonces[_msgSender()] += 1;\\n\\n        _dtkHero.safeTransferFrom(address(this), _msgSender(), tokenId, \\\"\\\");\\n\\n        emit WithdrawDTKHero(_msgSender(), tokenId, _nonce);\\n    }\\n}\\n\",\"keccak256\":\"0xf4c3e2c43529eb2f4c6b2c6330284f89aa3f6aae4c998f13e03d3d07ae712972\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b5060405161110e38038061110e83398101604081905261002f9161016c565b61003833610100565b6001600160a01b0382166100935760405162461bcd60e51b815260206004820152601560248201527f496e76616c696420546f6b656e2041646472657373000000000000000000000060448201526064015b60405180910390fd5b6001600160a01b0381166100d85760405162461bcd60e51b815260206004820152600c60248201526b24b73b30b634b21030b2323960a11b604482015260640161008a565b6001600160a01b03918216608052600280546001600160a01b0319169190921617905561019f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b038116811461016757600080fd5b919050565b6000806040838503121561017f57600080fd5b61018883610150565b915061019660208401610150565b90509250929050565b608051610f386101d6600039600081816101940152818161024601528181610366015281816103ee01526107180152610f386000f3fe608060405234801561001057600080fd5b506004361061009d5760003560e01c80636437ecfc116100665780636437ecfc146101cc578063715018a6146102035780638da5cb5b1461020b578063b42348ac1461021c578063f2fde38b1461022f57600080fd5b8062c700b9146100a2578063150b7a021461013e5780631aca63761461016a5780632fc2aab21461017f57806347b7856f14610192575b600080fd5b61010c6100b0366004610b1e565b6040805160608082018352600080835260208084018290529284018190529384526001808352938390208351918201845280546001600160a01b0381168352600160a01b900460ff161515928201929092529201549082015290565b6040805182516001600160a01b0316815260208084015115159082015291810151908201526060015b60405180910390f35b61015161014c366004610bf6565b610242565b6040516001600160e01b03199091168152602001610135565b61017d610178366004610c5e565b61035c565b005b61017d61018d366004610c9a565b61050d565b7f00000000000000000000000000000000000000000000000000000000000000005b6040516001600160a01b039091168152602001610135565b6101f56101da366004610cea565b6001600160a01b031660009081526003602052604090205490565b604051908152602001610135565b61017d6107cf565b6000546001600160a01b03166101b4565b6002546101b4906001600160a01b031681565b61017d61023d366004610cea565b6107e3565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163303610307578151151560006102838461085c565b60008681526001602081815260409283902080546001600160a01b038d166001600160a81b03199091168117600160a01b8915159081029190911783559382018690558451938452918301859052939450889290917fad915c2b1bb4f9cdc66dc2d9905c98ac6cbc1bd5ee84f2f0de71a55d33951894910160405180910390a35050505b604080516001600160a01b0386811682529151859288169133917f2658be41a741c90fc1ac80205f19b27bfb6600f1e4c0f41e2f3ff6c615aa95cd9181900360200190a4630a85bd0160e11b95945050505050565b6103646108e1565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b03160361045057600081815260016020819052604080832080546001600160a81b0319168155918201929092559051632142170760e11b81523060048201526001600160a01b038481166024830152604482018490527f000000000000000000000000000000000000000000000000000000000000000016906342842e0e90606401600060405180830381600087803b15801561043257600080fd5b505af1158015610446573d6000803e3d6000fd5b50505050506104c7565b604051635c46a7ef60e11b81523060048201526001600160a01b03838116602483015260448201839052608060648301526000608483015284169063b88d4fde9060a401600060405180830381600087803b1580156104ae57600080fd5b505af11580156104c2573d6000803e3d6000fd5b505050505b80826001600160a01b0316846001600160a01b03167f351b8d13789e4d8d2717631559251955685881a31494dd0b8b19b4ef8530bb6d60405160405180910390a4505050565b8233600082815260016020526040902054849084906001600160a01b031661057c5760405162461bcd60e51b815260206004820181905260248201527f546f6b656e20686173206e6f74206265656e206465706f73697465642079657460448201526064015b60405180910390fd5b6000848152600160205260409020546001600160a01b038481169116146105d45760405162461bcd60e51b815260206004820152600c60248201526b155b985d5d1a1bdc9a5e995960a21b6044820152606401610573565b816105f4846001600160a01b031660009081526003602052604090205490565b146106315760405162461bcd60e51b815260206004820152600d60248201526c496e76616c6964206e6f6e636560981b6044820152606401610573565b610656604051806060016040528060268152602001610edd602691398486858561093b565b6106965760405162461bcd60e51b8152602060048201526011602482015270496e76616c6964207369676e617475726560781b6044820152606401610573565b600087815260016020818152604080842080546001600160a81b0319168155808401859055338552600390925283208054919390916106d6908490610d22565b909155505060408051635c46a7ef60e11b8152306004820152336024820152604481018a90526080606482015260006084820181905291516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169263b88d4fde9260a4808201939182900301818387803b15801561075b57600080fd5b505af115801561076f573d6000803e3d6000fd5b5050505061077a3390565b6001600160a01b03167f43b453d8d1a78d05fdd6b463c4ecc642e03ec902fcd7d7b64469fba191bdf9af89896040516107bd929190918252602082015260400190565b60405180910390a25050505050505050565b6107d76108e1565b6107e160006109e8565b565b6107eb6108e1565b6001600160a01b0381166108505760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610573565b610859816109e8565b50565b60008060005b83518110156108da57610876816001610d22565b84516108829190610d35565b61088d906008610d48565b610898906002610e43565b8482815181106108aa576108aa610e4f565b01602001516108bc919060f81c610d48565b6108c69083610d22565b9150806108d281610e65565b915050610862565b5092915050565b6000546001600160a01b031633146107e15760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610573565b6000806109ba873088888860405160200161095a959493929190610e7e565b60408051601f1981840301815282825280516020918201207f19457468657265756d205369676e6564204d6573736167653a0a33320000000084830152603c8085019190915282518085039091018152605c909301909152815191012090565b6002549091506001600160a01b03166109d38285610a38565b6001600160a01b031614979650505050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080600080610a4785610ab8565b6040805160008152602081018083528b905260ff8516918101919091526060810183905260808101829052929550909350915060019060a0016020604051602081039080840390855afa158015610aa2573d6000803e3d6000fd5b5050506020604051035193505050505b92915050565b60008060008351604114610b025760405162461bcd60e51b8152602060048201526011602482015270496e76616c6964207369676e617475726560781b6044820152606401610573565b5050506020810151604082015160609092015160001a92909190565b600060208284031215610b3057600080fd5b5035919050565b80356001600160a01b0381168114610b4e57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112610b7a57600080fd5b813567ffffffffffffffff80821115610b9557610b95610b53565b604051601f8301601f19908116603f01168101908282118183101715610bbd57610bbd610b53565b81604052838152866020858801011115610bd657600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060008060808587031215610c0c57600080fd5b610c1585610b37565b9350610c2360208601610b37565b925060408501359150606085013567ffffffffffffffff811115610c4657600080fd5b610c5287828801610b69565b91505092959194509250565b600080600060608486031215610c7357600080fd5b610c7c84610b37565b9250610c8a60208501610b37565b9150604084013590509250925092565b600080600060608486031215610caf57600080fd5b8335925060208401359150604084013567ffffffffffffffff811115610cd457600080fd5b610ce086828701610b69565b9150509250925092565b600060208284031215610cfc57600080fd5b610d0582610b37565b9392505050565b634e487b7160e01b600052601160045260246000fd5b80820180821115610ab257610ab2610d0c565b81810381811115610ab257610ab2610d0c565b8082028115828204841417610ab257610ab2610d0c565b600181815b80851115610d9a578160001904821115610d8057610d80610d0c565b80851615610d8d57918102915b93841c9390800290610d64565b509250929050565b600082610db157506001610ab2565b81610dbe57506000610ab2565b8160018114610dd45760028114610dde57610dfa565b6001915050610ab2565b60ff841115610def57610def610d0c565b50506001821b610ab2565b5060208310610133831016604e8410600b8410161715610e1d575081810a610ab2565b610e278383610d5f565b8060001904821115610e3b57610e3b610d0c565b029392505050565b6000610d058383610da2565b634e487b7160e01b600052603260045260246000fd5b600060018201610e7757610e77610d0c565b5060010190565b6000865160005b81811015610e9f576020818a018101518583015201610e85565b506bffffffffffffffffffffffff19606097881b8116919093019081529490951b166014840152602883019190915260488201526068019291505056fe776974686472617744544b4865726f2875696e743235362c75696e743235362c627974657329a26469706673582212204ca914410c9496dd0c779cfa9be2b60d76c4e8e0ad71ee94ada2e7349c5d4d6d64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009d5760003560e01c80636437ecfc116100665780636437ecfc146101cc578063715018a6146102035780638da5cb5b1461020b578063b42348ac1461021c578063f2fde38b1461022f57600080fd5b8062c700b9146100a2578063150b7a021461013e5780631aca63761461016a5780632fc2aab21461017f57806347b7856f14610192575b600080fd5b61010c6100b0366004610b1e565b6040805160608082018352600080835260208084018290529284018190529384526001808352938390208351918201845280546001600160a01b0381168352600160a01b900460ff161515928201929092529201549082015290565b6040805182516001600160a01b0316815260208084015115159082015291810151908201526060015b60405180910390f35b61015161014c366004610bf6565b610242565b6040516001600160e01b03199091168152602001610135565b61017d610178366004610c5e565b61035c565b005b61017d61018d366004610c9a565b61050d565b7f00000000000000000000000000000000000000000000000000000000000000005b6040516001600160a01b039091168152602001610135565b6101f56101da366004610cea565b6001600160a01b031660009081526003602052604090205490565b604051908152602001610135565b61017d6107cf565b6000546001600160a01b03166101b4565b6002546101b4906001600160a01b031681565b61017d61023d366004610cea565b6107e3565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163303610307578151151560006102838461085c565b60008681526001602081815260409283902080546001600160a01b038d166001600160a81b03199091168117600160a01b8915159081029190911783559382018690558451938452918301859052939450889290917fad915c2b1bb4f9cdc66dc2d9905c98ac6cbc1bd5ee84f2f0de71a55d33951894910160405180910390a35050505b604080516001600160a01b0386811682529151859288169133917f2658be41a741c90fc1ac80205f19b27bfb6600f1e4c0f41e2f3ff6c615aa95cd9181900360200190a4630a85bd0160e11b95945050505050565b6103646108e1565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b03160361045057600081815260016020819052604080832080546001600160a81b0319168155918201929092559051632142170760e11b81523060048201526001600160a01b038481166024830152604482018490527f000000000000000000000000000000000000000000000000000000000000000016906342842e0e90606401600060405180830381600087803b15801561043257600080fd5b505af1158015610446573d6000803e3d6000fd5b50505050506104c7565b604051635c46a7ef60e11b81523060048201526001600160a01b03838116602483015260448201839052608060648301526000608483015284169063b88d4fde9060a401600060405180830381600087803b1580156104ae57600080fd5b505af11580156104c2573d6000803e3d6000fd5b505050505b80826001600160a01b0316846001600160a01b03167f351b8d13789e4d8d2717631559251955685881a31494dd0b8b19b4ef8530bb6d60405160405180910390a4505050565b8233600082815260016020526040902054849084906001600160a01b031661057c5760405162461bcd60e51b815260206004820181905260248201527f546f6b656e20686173206e6f74206265656e206465706f73697465642079657460448201526064015b60405180910390fd5b6000848152600160205260409020546001600160a01b038481169116146105d45760405162461bcd60e51b815260206004820152600c60248201526b155b985d5d1a1bdc9a5e995960a21b6044820152606401610573565b816105f4846001600160a01b031660009081526003602052604090205490565b146106315760405162461bcd60e51b815260206004820152600d60248201526c496e76616c6964206e6f6e636560981b6044820152606401610573565b610656604051806060016040528060268152602001610edd602691398486858561093b565b6106965760405162461bcd60e51b8152602060048201526011602482015270496e76616c6964207369676e617475726560781b6044820152606401610573565b600087815260016020818152604080842080546001600160a81b0319168155808401859055338552600390925283208054919390916106d6908490610d22565b909155505060408051635c46a7ef60e11b8152306004820152336024820152604481018a90526080606482015260006084820181905291516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169263b88d4fde9260a4808201939182900301818387803b15801561075b57600080fd5b505af115801561076f573d6000803e3d6000fd5b5050505061077a3390565b6001600160a01b03167f43b453d8d1a78d05fdd6b463c4ecc642e03ec902fcd7d7b64469fba191bdf9af89896040516107bd929190918252602082015260400190565b60405180910390a25050505050505050565b6107d76108e1565b6107e160006109e8565b565b6107eb6108e1565b6001600160a01b0381166108505760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610573565b610859816109e8565b50565b60008060005b83518110156108da57610876816001610d22565b84516108829190610d35565b61088d906008610d48565b610898906002610e43565b8482815181106108aa576108aa610e4f565b01602001516108bc919060f81c610d48565b6108c69083610d22565b9150806108d281610e65565b915050610862565b5092915050565b6000546001600160a01b031633146107e15760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610573565b6000806109ba873088888860405160200161095a959493929190610e7e565b60408051601f1981840301815282825280516020918201207f19457468657265756d205369676e6564204d6573736167653a0a33320000000084830152603c8085019190915282518085039091018152605c909301909152815191012090565b6002549091506001600160a01b03166109d38285610a38565b6001600160a01b031614979650505050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080600080610a4785610ab8565b6040805160008152602081018083528b905260ff8516918101919091526060810183905260808101829052929550909350915060019060a0016020604051602081039080840390855afa158015610aa2573d6000803e3d6000fd5b5050506020604051035193505050505b92915050565b60008060008351604114610b025760405162461bcd60e51b8152602060048201526011602482015270496e76616c6964207369676e617475726560781b6044820152606401610573565b5050506020810151604082015160609092015160001a92909190565b600060208284031215610b3057600080fd5b5035919050565b80356001600160a01b0381168114610b4e57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112610b7a57600080fd5b813567ffffffffffffffff80821115610b9557610b95610b53565b604051601f8301601f19908116603f01168101908282118183101715610bbd57610bbd610b53565b81604052838152866020858801011115610bd657600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060008060808587031215610c0c57600080fd5b610c1585610b37565b9350610c2360208601610b37565b925060408501359150606085013567ffffffffffffffff811115610c4657600080fd5b610c5287828801610b69565b91505092959194509250565b600080600060608486031215610c7357600080fd5b610c7c84610b37565b9250610c8a60208501610b37565b9150604084013590509250925092565b600080600060608486031215610caf57600080fd5b8335925060208401359150604084013567ffffffffffffffff811115610cd457600080fd5b610ce086828701610b69565b9150509250925092565b600060208284031215610cfc57600080fd5b610d0582610b37565b9392505050565b634e487b7160e01b600052601160045260246000fd5b80820180821115610ab257610ab2610d0c565b81810381811115610ab257610ab2610d0c565b8082028115828204841417610ab257610ab2610d0c565b600181815b80851115610d9a578160001904821115610d8057610d80610d0c565b80851615610d8d57918102915b93841c9390800290610d64565b509250929050565b600082610db157506001610ab2565b81610dbe57506000610ab2565b8160018114610dd45760028114610dde57610dfa565b6001915050610ab2565b60ff841115610def57610def610d0c565b50506001821b610ab2565b5060208310610133831016604e8410600b8410161715610e1d575081810a610ab2565b610e278383610d5f565b8060001904821115610e3b57610e3b610d0c565b029392505050565b6000610d058383610da2565b634e487b7160e01b600052603260045260246000fd5b600060018201610e7757610e77610d0c565b5060010190565b6000865160005b81811015610e9f576020818a018101518583015201610e85565b506bffffffffffffffffffffffff19606097881b8116919093019081529490951b166014840152602883019190915260488201526068019291505056fe776974686472617744544b4865726f2875696e743235362c75696e743235362c627974657329a26469706673582212204ca914410c9496dd0c779cfa9be2b60d76c4e8e0ad71ee94ada2e7349c5d4d6d64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/DTKHeroControlPool.sol:DTKHeroControlPool",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3578,
        "contract": "contracts/DTKHeroControlPool.sol:DTKHeroControlPool",
        "label": "_depositedDtkHero",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(DepositInfo)3530_storage)"
      },
      {
        "astId": 3580,
        "contract": "contracts/DTKHeroControlPool.sol:DTKHeroControlPool",
        "label": "authSigner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 3584,
        "contract": "contracts/DTKHeroControlPool.sol:DTKHeroControlPool",
        "label": "sigNonces",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(DepositInfo)3530_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DepositInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(DepositInfo)3530_storage"
      },
      "t_struct(DepositInfo)3530_storage": {
        "encoding": "inplace",
        "label": "struct DepositInfo",
        "members": [
          {
            "astId": 3525,
            "contract": "contracts/DTKHeroControlPool.sol:DTKHeroControlPool",
            "label": "depositor",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3527,
            "contract": "contracts/DTKHeroControlPool.sol:DTKHeroControlPool",
            "label": "hasPlayerId",
            "offset": 20,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 3529,
            "contract": "contracts/DTKHeroControlPool.sol:DTKHeroControlPool",
            "label": "playerId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}