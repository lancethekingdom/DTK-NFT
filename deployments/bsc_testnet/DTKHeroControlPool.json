{
  "address": "0x681fB126a179706282dCd5a20440EF281EA9a3e5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_authSigner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "hasPlayerId",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "playerId",
          "type": "uint256"
        }
      ],
      "name": "OnDtkHeroDeposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "erc721",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "OnERC721Received",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "erc721Address",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "TransferERC721",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "name": "WithdrawDTKHero",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "authSigner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "walletAddress",
          "type": "address"
        }
      ],
      "name": "currentNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "depositInfoOfDtkHero",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "depositor",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "hasPlayerId",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "playerId",
              "type": "uint256"
            }
          ],
          "internalType": "struct DepositInfo",
          "name": "depositInfo",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDtkHeroAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "erc721Address",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferERC721",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "undepositedTokensOfOwner",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "sig",
          "type": "bytes"
        }
      ],
      "name": "withdrawDTKHero",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x24b7c28c498365dddcb95517796c1535f09655672213ec644fc6d85df7614920",
  "receipt": {
    "to": null,
    "from": "0x7d14F396d347C960bC2774141D51DA59Be408F71",
    "contractAddress": "0x681fB126a179706282dCd5a20440EF281EA9a3e5",
    "transactionIndex": 0,
    "gasUsed": "1183750",
    "logsBloom": "0x
    "blockHash": "0x241fe7b7819bff9c839a8c1759c8a1a3eddda0a3135b80ffebff8e4183d1ec99",
    "transactionHash": "0x24b7c28c498365dddcb95517796c1535f09655672213ec644fc6d85df7614920",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 25097862,
        "transactionHash": "0x24b7c28c498365dddcb95517796c1535f09655672213ec644fc6d85df7614920",
        "address": "0x681fB126a179706282dCd5a20440EF281EA9a3e5",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007d14f396d347c960bc2774141d51da59be408f71"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x241fe7b7819bff9c839a8c1759c8a1a3eddda0a3135b80ffebff8e4183d1ec99"
      }
    ],
    "blockNumber": 25097862,
    "cumulativeGasUsed": "1183750",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xB54239d54DbfeBC0d8035427227343B9fF42F17B",
    "0x7d14F396d347C960bC2774141D51DA59Be408F71"
  ],
  "numDeployments": 4,
  "solcInputHash": "f040ee3f4d2a0a5297c6672d23655d14",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_authSigner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"hasPlayerId\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"playerId\",\"type\":\"uint256\"}],\"name\":\"OnDtkHeroDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"erc721\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"OnERC721Received\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"erc721Address\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"TransferERC721\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"WithdrawDTKHero\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"authSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"}],\"name\":\"currentNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"depositInfoOfDtkHero\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"hasPlayerId\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"playerId\",\"type\":\"uint256\"}],\"internalType\":\"struct DepositInfo\",\"name\":\"depositInfo\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDtkHeroAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc721Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"undepositedTokensOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"withdrawDTKHero\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DTKHeroControlPool.sol\":\"DTKHeroControlPool\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x0108bf6a6ebd5f96678bed33a35947537263f96766131ee91461fb6485805028\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/DTKHeroControlPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"./IDropERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\nstruct DepositInfo {\\n    address depositor;\\n    bool hasPlayerId;\\n    uint256 playerId;\\n}\\n\\ncontract DTKHeroControlPool is Ownable, ERC721Holder {\\n    IDropERC721 immutable _dtkHero;\\n\\n    event OnERC721Received(\\n        address indexed erc721,\\n        address indexed operator,\\n        address from,\\n        uint256 indexed tokenId\\n    );\\n    event OnDtkHeroDeposited(\\n        address indexed depositor,\\n        uint256 indexed tokenId,\\n        bool hasPlayerId,\\n        uint256 playerId\\n    );\\n    event WithdrawDTKHero(\\n        address indexed operator,\\n        uint256 tokenId,\\n        uint256 nonce\\n    );\\n    event TransferERC721(\\n        address indexed erc721Address,\\n        address indexed to,\\n        uint256 indexed tokenId\\n    );\\n\\n    mapping(uint256 => DepositInfo) private _depositedDtkHero;\\n\\n    // for signature control\\n    address public authSigner;\\n    mapping(address => uint256) sigNonces; // all the nonces consumed by each address\\n\\n    constructor(address nftAddress, address _authSigner) {\\n        require(nftAddress != address(0), \\\"Invalid Token Address\\\");\\n        require(_authSigner != address(0), \\\"Invalid addr\\\");\\n\\n        _dtkHero = IDropERC721(nftAddress);\\n        authSigner = _authSigner;\\n    }\\n\\n    function bytesToUint(bytes memory b) internal pure returns (uint256) {\\n        uint256 number;\\n        for (uint256 i = 0; i < b.length; i++) {\\n            number =\\n                number +\\n                uint256(uint8(b[i])) *\\n                (2**(8 * (b.length - (i + 1))));\\n        }\\n        return number;\\n    }\\n\\n    function splitSignature(bytes memory sig)\\n        internal\\n        pure\\n        returns (\\n            uint8,\\n            bytes32,\\n            bytes32\\n        )\\n    {\\n        require(sig.length == 65, \\\"Invalid signature\\\");\\n\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        assembly {\\n            r := mload(add(sig, 32))\\n            s := mload(add(sig, 64))\\n            v := byte(0, mload(add(sig, 96)))\\n        }\\n\\n        return (v, r, s);\\n    }\\n\\n    function prefixed(bytes32 hash) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash)\\n            );\\n    }\\n\\n    function recoverSigner(bytes32 message, bytes memory sig)\\n        internal\\n        pure\\n        returns (address)\\n    {\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n\\n        (v, r, s) = splitSignature(sig);\\n        return ecrecover(message, v, r, s);\\n    }\\n\\n    function _validateHash(\\n        string memory _methodIdentifier,\\n        address _address,\\n        uint256 _nonce,\\n        bytes memory sig\\n    ) internal view returns (bool) {\\n        bytes32 msgHash = prefixed(\\n            keccak256(\\n                abi.encodePacked(\\n                    _methodIdentifier,\\n                    address(this),\\n                    _address,\\n                    _nonce\\n                )\\n            )\\n        );\\n        return recoverSigner(msgHash, sig) == authSigner;\\n    }\\n\\n    function _validateHashWithTokenId(\\n        string memory _methodIdentifier,\\n        address _address,\\n        uint256 _tokenId,\\n        uint256 _nonce,\\n        bytes memory sig\\n    ) internal view returns (bool) {\\n        bytes32 msgHash = prefixed(\\n            keccak256(\\n                abi.encodePacked(\\n                    _methodIdentifier,\\n                    address(this),\\n                    _address,\\n                    _tokenId,\\n                    _nonce\\n                )\\n            )\\n        );\\n        return recoverSigner(msgHash, sig) == authSigner;\\n    }\\n\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override returns (bytes4) {\\n        if (_msgSender() == address(_dtkHero)) {\\n            bool hasPlayerId = data.length != 0;\\n            uint256 playerId = bytesToUint(data);\\n\\n            DepositInfo storage depositInfo = _depositedDtkHero[tokenId];\\n            depositInfo.depositor = operator;\\n            depositInfo.hasPlayerId = hasPlayerId;\\n            depositInfo.playerId = playerId;\\n\\n            emit OnDtkHeroDeposited(operator, tokenId, hasPlayerId, playerId);\\n        }\\n        emit OnERC721Received(_msgSender(), operator, from, tokenId);\\n        return super.onERC721Received(operator, from, tokenId, data);\\n    }\\n\\n    function currentNonce(address walletAddress) public view returns (uint256) {\\n        return sigNonces[walletAddress];\\n    }\\n\\n    function getDtkHeroAddress() external view returns (address) {\\n        return address(_dtkHero);\\n    }\\n\\n    // to retrieve all the tokens of a owner from fractal nft contract\\n    function undepositedTokensOfOwner(address owner)\\n        public\\n        view\\n        returns (uint256[] memory)\\n    {\\n        uint256 ownerTokenCount = _dtkHero.balanceOf(owner);\\n        uint256[] memory ownedTokens = new uint256[](ownerTokenCount);\\n        uint256 currentTokenId = 0;\\n        uint256 ownedTokenIndex = 0;\\n\\n        while (\\n            ownedTokenIndex < ownerTokenCount &&\\n            currentTokenId <= _dtkHero.totalMinted()\\n        ) {\\n            try _dtkHero.ownerOf(currentTokenId) returns (\\n                address currentTokenOwner\\n            ) {\\n                if (currentTokenOwner == owner) {\\n                    ownedTokens[ownedTokenIndex] = currentTokenId;\\n                    ownedTokenIndex++;\\n                }\\n            } catch Error(\\n                string memory /*reason*/\\n            ) {\\n                // This is executed in case\\n                // revert was called inside getData\\n                // and a reason string was provided.\\n            } catch Panic(\\n                uint256 /*errorCode*/\\n            ) {\\n                // This is executed in case of a panic,\\n                // i.e. a serious error like division by zero\\n                // or overflow. The error code can be used\\n                // to determine the kind of error.\\n            } catch (\\n                bytes memory /*lowLevelData*/\\n            ) {\\n                // This is executed in case revert() was used.\\n            }\\n\\n            currentTokenId++;\\n        }\\n        return ownedTokens;\\n    }\\n\\n    function depositInfoOfDtkHero(uint256 tokenId)\\n        external\\n        view\\n        returns (DepositInfo memory depositInfo)\\n    {\\n        return _depositedDtkHero[tokenId];\\n    }\\n\\n    function transferERC721(\\n        address erc721Address,\\n        address to,\\n        uint256 tokenId\\n    ) external onlyOwner {\\n        if (erc721Address == address(_dtkHero)) {\\n            DepositInfo storage depositInfo = _depositedDtkHero[tokenId];\\n\\n            depositInfo.depositor = address(0);\\n            depositInfo.hasPlayerId = false;\\n            depositInfo.playerId = 0;\\n\\n            _dtkHero.safeTransferFrom(address(this), to, tokenId);\\n        } else {\\n            IDropERC721(erc721Address).safeTransferFrom(\\n                address(this),\\n                to,\\n                tokenId,\\n                \\\"\\\"\\n            );\\n        }\\n        emit TransferERC721(erc721Address, to, tokenId);\\n    }\\n\\n    modifier withdrawDTKHeroCompliance(\\n        uint256 tokenId,\\n        address wallet,\\n        uint256 nonce,\\n        bytes memory sig\\n    ) {\\n        require(\\n            _depositedDtkHero[tokenId].depositor != address(0),\\n            \\\"Token has not been deposited yet\\\"\\n        );\\n        require(_depositedDtkHero[tokenId].depositor == wallet, \\\"Unauthorized\\\");\\n        require(currentNonce(wallet) == nonce, \\\"Invalid nonce\\\");\\n\\n        require(\\n            _validateHashWithTokenId(\\n                \\\"withdrawDTKHero(uint256,uint256,bytes)\\\",\\n                wallet,\\n                tokenId,\\n                nonce,\\n                sig\\n            ),\\n            \\\"Invalid signature\\\"\\n        );\\n        _;\\n    }\\n\\n    function withdrawDTKHero(\\n        uint256 tokenId,\\n        uint256 _nonce,\\n        bytes memory sig\\n    ) external withdrawDTKHeroCompliance(tokenId, _msgSender(), _nonce, sig) {\\n        DepositInfo storage depositInfo = _depositedDtkHero[tokenId];\\n\\n        depositInfo.depositor = address(0);\\n        depositInfo.hasPlayerId = false;\\n        depositInfo.playerId = 0;\\n\\n        // increment nonce\\n        sigNonces[_msgSender()] += 1;\\n\\n        _dtkHero.safeTransferFrom(address(this), _msgSender(), tokenId, \\\"\\\");\\n\\n        emit WithdrawDTKHero(_msgSender(), tokenId, _nonce);\\n    }\\n}\\n\",\"keccak256\":\"0x16e61e78e3b5cdcd7ffd0d78d9dde57f93f429691f8d6175784f27a1e8d299b3\",\"license\":\"MIT\"},\"contracts/IDropERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IDropERC721 is IERC165 {\\n    /// @dev Emitted when the global max supply of tokens is updated.\\n    event MaxTotalSupplyUpdated(uint256 maxTotalSupply);\\n   \\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * Returns the total amount of tokens minted in the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * Returns the total amount of tokens minted in the contract.\\n     */\\n    function totalMinted() external view returns (uint256);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x845d738c425ea4b88d24a5efd9b6b172f9fa0dee90136e67aa66d35a89999e69\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200158e3803806200158e833981016040819052620000349162000178565b6200003f336200010b565b6001600160a01b0382166200009b5760405162461bcd60e51b815260206004820152601560248201527f496e76616c696420546f6b656e2041646472657373000000000000000000000060448201526064015b60405180910390fd5b6001600160a01b038116620000e25760405162461bcd60e51b815260206004820152600c60248201526b24b73b30b634b21030b2323960a11b604482015260640162000092565b6001600160a01b03918216608052600280546001600160a01b03191691909216179055620001b0565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146200017357600080fd5b919050565b600080604083850312156200018c57600080fd5b62000197836200015b565b9150620001a7602084016200015b565b90509250929050565b608051611391620001fd6000396000818161019f015281816102710152818161039101528181610419015281816107430152818161081f015281816108e3015261098201526113916000f3fe608060405234801561001057600080fd5b50600436106100a85760003560e01c80635b27d234116100715780635b27d234146101d75780636437ecfc146101f7578063715018a61461022e5780638da5cb5b14610236578063b42348ac14610247578063f2fde38b1461025a57600080fd5b8062c700b9146100ad578063150b7a02146101495780631aca6376146101755780632fc2aab21461018a57806347b7856f1461019d575b600080fd5b6101176100bb366004610e1f565b6040805160608082018352600080835260208084018290529284018190529384526001808352938390208351918201845280546001600160a01b0381168352600160a01b900460ff161515928201929092529201549082015290565b6040805182516001600160a01b0316815260208084015115159082015291810151908201526060015b60405180910390f35b61015c610157366004610f04565b61026d565b6040516001600160e01b03199091168152602001610140565b610188610183366004610f70565b610387565b005b610188610198366004610fb1565b610538565b7f00000000000000000000000000000000000000000000000000000000000000005b6040516001600160a01b039091168152602001610140565b6101ea6101e5366004611001565b6107fa565b6040516101409190611025565b610220610205366004611001565b6001600160a01b031660009081526003602052604090205490565b604051908152602001610140565b610188610ad0565b6000546001600160a01b03166101bf565b6002546101bf906001600160a01b031681565b610188610268366004611001565b610ae4565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163303610332578151151560006102ae84610b5d565b60008681526001602081815260409283902080546001600160a01b038d166001600160a81b03199091168117600160a01b8915159081029190911783559382018690558451938452918301859052939450889290917fad915c2b1bb4f9cdc66dc2d9905c98ac6cbc1bd5ee84f2f0de71a55d33951894910160405180910390a35050505b604080516001600160a01b0386811682529151859288169133917f2658be41a741c90fc1ac80205f19b27bfb6600f1e4c0f41e2f3ff6c615aa95cd9181900360200190a4630a85bd0160e11b95945050505050565b61038f610be2565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b03160361047b57600081815260016020819052604080832080546001600160a81b0319168155918201929092559051632142170760e11b81523060048201526001600160a01b038481166024830152604482018490527f000000000000000000000000000000000000000000000000000000000000000016906342842e0e90606401600060405180830381600087803b15801561045d57600080fd5b505af1158015610471573d6000803e3d6000fd5b50505050506104f2565b604051635c46a7ef60e11b81523060048201526001600160a01b03838116602483015260448201839052608060648301526000608483015284169063b88d4fde9060a401600060405180830381600087803b1580156104d957600080fd5b505af11580156104ed573d6000803e3d6000fd5b505050505b80826001600160a01b0316846001600160a01b03167f351b8d13789e4d8d2717631559251955685881a31494dd0b8b19b4ef8530bb6d60405160405180910390a4505050565b8233600082815260016020526040902054849084906001600160a01b03166105a75760405162461bcd60e51b815260206004820181905260248201527f546f6b656e20686173206e6f74206265656e206465706f73697465642079657460448201526064015b60405180910390fd5b6000848152600160205260409020546001600160a01b038481169116146105ff5760405162461bcd60e51b815260206004820152600c60248201526b155b985d5d1a1bdc9a5e995960a21b604482015260640161059e565b8161061f846001600160a01b031660009081526003602052604090205490565b1461065c5760405162461bcd60e51b815260206004820152600d60248201526c496e76616c6964206e6f6e636560981b604482015260640161059e565b6106816040518060600160405280602681526020016113366026913984868585610c3c565b6106c15760405162461bcd60e51b8152602060048201526011602482015270496e76616c6964207369676e617475726560781b604482015260640161059e565b600087815260016020818152604080842080546001600160a81b03191681558084018590553385526003909252832080549193909161070190849061107f565b909155505060408051635c46a7ef60e11b8152306004820152336024820152604481018a90526080606482015260006084820181905291516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169263b88d4fde9260a4808201939182900301818387803b15801561078657600080fd5b505af115801561079a573d6000803e3d6000fd5b505050506107a53390565b6001600160a01b03167f43b453d8d1a78d05fdd6b463c4ecc642e03ec902fcd7d7b64469fba191bdf9af89896040516107e8929190918252602082015260400190565b60405180910390a25050505050505050565b6040516370a0823160e01b81526001600160a01b0382811660048301526060916000917f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015610866573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061088a9190611092565b905060008167ffffffffffffffff8111156108a7576108a7610e4d565b6040519080825280602002602001820160405280156108d0578160200160208202803683370190505b5090506000805b838110801561096757507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a2309ff86040518163ffffffff1660e01b8152600401602060405180830381865afa15801561093f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109639190611092565b8211155b15610ac6576040516331a9108f60e11b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636352211e90602401602060405180830381865afa9250505080156109ed575060408051601f3d908101601f191682019092526109ea918101906110ab565b60015b610a6d576109f96110c8565b806308c379a003610a1e5750610a0d6110e4565b80610a185750610a37565b50610ab4565b634e487b7103610a3757610a3061116e565b90610a1857505b3d808015610a61576040519150601f19603f3d011682016040523d82523d6000602084013e610a66565b606091505b5050610ab4565b866001600160a01b0316816001600160a01b031603610ab25782848381518110610a9957610a9961118e565b602090810291909101015281610aae816111a4565b9250505b505b81610abe816111a4565b9250506108d7565b5090949350505050565b610ad8610be2565b610ae26000610ce9565b565b610aec610be2565b6001600160a01b038116610b515760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161059e565b610b5a81610ce9565b50565b60008060005b8351811015610bdb57610b7781600161107f565b8451610b8391906111bd565b610b8e9060086111d0565b610b999060026112cb565b848281518110610bab57610bab61118e565b0160200151610bbd919060f81c6111d0565b610bc7908361107f565b915080610bd3816111a4565b915050610b63565b5092915050565b6000546001600160a01b03163314610ae25760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161059e565b600080610cbb8730888888604051602001610c5b9594939291906112d7565b60408051601f1981840301815282825280516020918201207f19457468657265756d205369676e6564204d6573736167653a0a33320000000084830152603c8085019190915282518085039091018152605c909301909152815191012090565b6002549091506001600160a01b0316610cd48285610d39565b6001600160a01b031614979650505050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080600080610d4885610db9565b6040805160008152602081018083528b905260ff8516918101919091526060810183905260808101829052929550909350915060019060a0016020604051602081039080840390855afa158015610da3573d6000803e3d6000fd5b5050506020604051035193505050505b92915050565b60008060008351604114610e035760405162461bcd60e51b8152602060048201526011602482015270496e76616c6964207369676e617475726560781b604482015260640161059e565b5050506020810151604082015160609092015160001a92909190565b600060208284031215610e3157600080fd5b5035919050565b6001600160a01b0381168114610b5a57600080fd5b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff81118282101715610e8957610e89610e4d565b6040525050565b600082601f830112610ea157600080fd5b813567ffffffffffffffff811115610ebb57610ebb610e4d565b604051610ed2601f8301601f191660200182610e63565b818152846020838601011115610ee757600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060808587031215610f1a57600080fd5b8435610f2581610e38565b93506020850135610f3581610e38565b925060408501359150606085013567ffffffffffffffff811115610f5857600080fd5b610f6487828801610e90565b91505092959194509250565b600080600060608486031215610f8557600080fd5b8335610f9081610e38565b92506020840135610fa081610e38565b929592945050506040919091013590565b600080600060608486031215610fc657600080fd5b8335925060208401359150604084013567ffffffffffffffff811115610feb57600080fd5b610ff786828701610e90565b9150509250925092565b60006020828403121561101357600080fd5b813561101e81610e38565b9392505050565b6020808252825182820181905260009190848201906040850190845b8181101561105d57835183529284019291840191600101611041565b50909695505050505050565b634e487b7160e01b600052601160045260246000fd5b80820180821115610db357610db3611069565b6000602082840312156110a457600080fd5b5051919050565b6000602082840312156110bd57600080fd5b815161101e81610e38565b600060033d11156110e15760046000803e5060005160e01c5b90565b600060443d10156110f25790565b6040516003193d81016004833e81513d67ffffffffffffffff816024840111818411171561112257505050505090565b828501915081518181111561113a5750505050505090565b843d87010160208285010111156111545750505050505090565b61116360208286010187610e63565b509095945050505050565b60008060233d111561118a576020600460003e50506000516001905b9091565b634e487b7160e01b600052603260045260246000fd5b6000600182016111b6576111b6611069565b5060010190565b81810381811115610db357610db3611069565b8082028115828204841417610db357610db3611069565b600181815b8085111561122257816000190482111561120857611208611069565b8085161561121557918102915b93841c93908002906111ec565b509250929050565b60008261123957506001610db3565b8161124657506000610db3565b816001811461125c576002811461126657611282565b6001915050610db3565b60ff84111561127757611277611069565b50506001821b610db3565b5060208310610133831016604e8410600b84101617156112a5575081810a610db3565b6112af83836111e7565b80600019048211156112c3576112c3611069565b029392505050565b600061101e838361122a565b6000865160005b818110156112f8576020818a0181015185830152016112de565b506bffffffffffffffffffffffff19606097881b8116919093019081529490951b166014840152602883019190915260488201526068019291505056fe776974686472617744544b4865726f2875696e743235362c75696e743235362c627974657329a26469706673582212202c4b43a190fb9f72e50d6f2505fc069ce9455092c2bcb373453adbaa8d6be02964736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a85760003560e01c80635b27d234116100715780635b27d234146101d75780636437ecfc146101f7578063715018a61461022e5780638da5cb5b14610236578063b42348ac14610247578063f2fde38b1461025a57600080fd5b8062c700b9146100ad578063150b7a02146101495780631aca6376146101755780632fc2aab21461018a57806347b7856f1461019d575b600080fd5b6101176100bb366004610e1f565b6040805160608082018352600080835260208084018290529284018190529384526001808352938390208351918201845280546001600160a01b0381168352600160a01b900460ff161515928201929092529201549082015290565b6040805182516001600160a01b0316815260208084015115159082015291810151908201526060015b60405180910390f35b61015c610157366004610f04565b61026d565b6040516001600160e01b03199091168152602001610140565b610188610183366004610f70565b610387565b005b610188610198366004610fb1565b610538565b7f00000000000000000000000000000000000000000000000000000000000000005b6040516001600160a01b039091168152602001610140565b6101ea6101e5366004611001565b6107fa565b6040516101409190611025565b610220610205366004611001565b6001600160a01b031660009081526003602052604090205490565b604051908152602001610140565b610188610ad0565b6000546001600160a01b03166101bf565b6002546101bf906001600160a01b031681565b610188610268366004611001565b610ae4565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163303610332578151151560006102ae84610b5d565b60008681526001602081815260409283902080546001600160a01b038d166001600160a81b03199091168117600160a01b8915159081029190911783559382018690558451938452918301859052939450889290917fad915c2b1bb4f9cdc66dc2d9905c98ac6cbc1bd5ee84f2f0de71a55d33951894910160405180910390a35050505b604080516001600160a01b0386811682529151859288169133917f2658be41a741c90fc1ac80205f19b27bfb6600f1e4c0f41e2f3ff6c615aa95cd9181900360200190a4630a85bd0160e11b95945050505050565b61038f610be2565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b03160361047b57600081815260016020819052604080832080546001600160a81b0319168155918201929092559051632142170760e11b81523060048201526001600160a01b038481166024830152604482018490527f000000000000000000000000000000000000000000000000000000000000000016906342842e0e90606401600060405180830381600087803b15801561045d57600080fd5b505af1158015610471573d6000803e3d6000fd5b50505050506104f2565b604051635c46a7ef60e11b81523060048201526001600160a01b03838116602483015260448201839052608060648301526000608483015284169063b88d4fde9060a401600060405180830381600087803b1580156104d957600080fd5b505af11580156104ed573d6000803e3d6000fd5b505050505b80826001600160a01b0316846001600160a01b03167f351b8d13789e4d8d2717631559251955685881a31494dd0b8b19b4ef8530bb6d60405160405180910390a4505050565b8233600082815260016020526040902054849084906001600160a01b03166105a75760405162461bcd60e51b815260206004820181905260248201527f546f6b656e20686173206e6f74206265656e206465706f73697465642079657460448201526064015b60405180910390fd5b6000848152600160205260409020546001600160a01b038481169116146105ff5760405162461bcd60e51b815260206004820152600c60248201526b155b985d5d1a1bdc9a5e995960a21b604482015260640161059e565b8161061f846001600160a01b031660009081526003602052604090205490565b1461065c5760405162461bcd60e51b815260206004820152600d60248201526c496e76616c6964206e6f6e636560981b604482015260640161059e565b6106816040518060600160405280602681526020016113366026913984868585610c3c565b6106c15760405162461bcd60e51b8152602060048201526011602482015270496e76616c6964207369676e617475726560781b604482015260640161059e565b600087815260016020818152604080842080546001600160a81b03191681558084018590553385526003909252832080549193909161070190849061107f565b909155505060408051635c46a7ef60e11b8152306004820152336024820152604481018a90526080606482015260006084820181905291516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169263b88d4fde9260a4808201939182900301818387803b15801561078657600080fd5b505af115801561079a573d6000803e3d6000fd5b505050506107a53390565b6001600160a01b03167f43b453d8d1a78d05fdd6b463c4ecc642e03ec902fcd7d7b64469fba191bdf9af89896040516107e8929190918252602082015260400190565b60405180910390a25050505050505050565b6040516370a0823160e01b81526001600160a01b0382811660048301526060916000917f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015610866573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061088a9190611092565b905060008167ffffffffffffffff8111156108a7576108a7610e4d565b6040519080825280602002602001820160405280156108d0578160200160208202803683370190505b5090506000805b838110801561096757507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a2309ff86040518163ffffffff1660e01b8152600401602060405180830381865afa15801561093f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109639190611092565b8211155b15610ac6576040516331a9108f60e11b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636352211e90602401602060405180830381865afa9250505080156109ed575060408051601f3d908101601f191682019092526109ea918101906110ab565b60015b610a6d576109f96110c8565b806308c379a003610a1e5750610a0d6110e4565b80610a185750610a37565b50610ab4565b634e487b7103610a3757610a3061116e565b90610a1857505b3d808015610a61576040519150601f19603f3d011682016040523d82523d6000602084013e610a66565b606091505b5050610ab4565b866001600160a01b0316816001600160a01b031603610ab25782848381518110610a9957610a9961118e565b602090810291909101015281610aae816111a4565b9250505b505b81610abe816111a4565b9250506108d7565b5090949350505050565b610ad8610be2565b610ae26000610ce9565b565b610aec610be2565b6001600160a01b038116610b515760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161059e565b610b5a81610ce9565b50565b60008060005b8351811015610bdb57610b7781600161107f565b8451610b8391906111bd565b610b8e9060086111d0565b610b999060026112cb565b848281518110610bab57610bab61118e565b0160200151610bbd919060f81c6111d0565b610bc7908361107f565b915080610bd3816111a4565b915050610b63565b5092915050565b6000546001600160a01b03163314610ae25760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161059e565b600080610cbb8730888888604051602001610c5b9594939291906112d7565b60408051601f1981840301815282825280516020918201207f19457468657265756d205369676e6564204d6573736167653a0a33320000000084830152603c8085019190915282518085039091018152605c909301909152815191012090565b6002549091506001600160a01b0316610cd48285610d39565b6001600160a01b031614979650505050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080600080610d4885610db9565b6040805160008152602081018083528b905260ff8516918101919091526060810183905260808101829052929550909350915060019060a0016020604051602081039080840390855afa158015610da3573d6000803e3d6000fd5b5050506020604051035193505050505b92915050565b60008060008351604114610e035760405162461bcd60e51b8152602060048201526011602482015270496e76616c6964207369676e617475726560781b604482015260640161059e565b5050506020810151604082015160609092015160001a92909190565b600060208284031215610e3157600080fd5b5035919050565b6001600160a01b0381168114610b5a57600080fd5b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff81118282101715610e8957610e89610e4d565b6040525050565b600082601f830112610ea157600080fd5b813567ffffffffffffffff811115610ebb57610ebb610e4d565b604051610ed2601f8301601f191660200182610e63565b818152846020838601011115610ee757600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060808587031215610f1a57600080fd5b8435610f2581610e38565b93506020850135610f3581610e38565b925060408501359150606085013567ffffffffffffffff811115610f5857600080fd5b610f6487828801610e90565b91505092959194509250565b600080600060608486031215610f8557600080fd5b8335610f9081610e38565b92506020840135610fa081610e38565b929592945050506040919091013590565b600080600060608486031215610fc657600080fd5b8335925060208401359150604084013567ffffffffffffffff811115610feb57600080fd5b610ff786828701610e90565b9150509250925092565b60006020828403121561101357600080fd5b813561101e81610e38565b9392505050565b6020808252825182820181905260009190848201906040850190845b8181101561105d57835183529284019291840191600101611041565b50909695505050505050565b634e487b7160e01b600052601160045260246000fd5b80820180821115610db357610db3611069565b6000602082840312156110a457600080fd5b5051919050565b6000602082840312156110bd57600080fd5b815161101e81610e38565b600060033d11156110e15760046000803e5060005160e01c5b90565b600060443d10156110f25790565b6040516003193d81016004833e81513d67ffffffffffffffff816024840111818411171561112257505050505090565b828501915081518181111561113a5750505050505090565b843d87010160208285010111156111545750505050505090565b61116360208286010187610e63565b509095945050505050565b60008060233d111561118a576020600460003e50506000516001905b9091565b634e487b7160e01b600052603260045260246000fd5b6000600182016111b6576111b6611069565b5060010190565b81810381811115610db357610db3611069565b8082028115828204841417610db357610db3611069565b600181815b8085111561122257816000190482111561120857611208611069565b8085161561121557918102915b93841c93908002906111ec565b509250929050565b60008261123957506001610db3565b8161124657506000610db3565b816001811461125c576002811461126657611282565b6001915050610db3565b60ff84111561127757611277611069565b50506001821b610db3565b5060208310610133831016604e8410600b84101617156112a5575081810a610db3565b6112af83836111e7565b80600019048211156112c3576112c3611069565b029392505050565b600061101e838361122a565b6000865160005b818110156112f8576020818a0181015185830152016112de565b506bffffffffffffffffffffffff19606097881b8116919093019081529490951b166014840152602883019190915260488201526068019291505056fe776974686472617744544b4865726f2875696e743235362c75696e743235362c627974657329a26469706673582212202c4b43a190fb9f72e50d6f2505fc069ce9455092c2bcb373453adbaa8d6be02964736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/DTKHeroControlPool.sol:DTKHeroControlPool",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3718,
        "contract": "contracts/DTKHeroControlPool.sol:DTKHeroControlPool",
        "label": "_depositedDtkHero",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(DepositInfo)3670_storage)"
      },
      {
        "astId": 3720,
        "contract": "contracts/DTKHeroControlPool.sol:DTKHeroControlPool",
        "label": "authSigner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 3724,
        "contract": "contracts/DTKHeroControlPool.sol:DTKHeroControlPool",
        "label": "sigNonces",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(DepositInfo)3670_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DepositInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(DepositInfo)3670_storage"
      },
      "t_struct(DepositInfo)3670_storage": {
        "encoding": "inplace",
        "label": "struct DepositInfo",
        "members": [
          {
            "astId": 3665,
            "contract": "contracts/DTKHeroControlPool.sol:DTKHeroControlPool",
            "label": "depositor",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3667,
            "contract": "contracts/DTKHeroControlPool.sol:DTKHeroControlPool",
            "label": "hasPlayerId",
            "offset": 20,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 3669,
            "contract": "contracts/DTKHeroControlPool.sol:DTKHeroControlPool",
            "label": "playerId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}