{
  "address": "0x681fB126a179706282dCd5a20440EF281EA9a3e5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_authSigner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maxSupply",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Burn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "authSigner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "sig",
          "type": "bytes"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "sig",
          "type": "bytes"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_uriPrefix",
          "type": "string"
        }
      ],
      "name": "setUriPrefix",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_uriSuffix",
          "type": "string"
        }
      ],
      "name": "setUriSuffix",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "tokensOfOwner",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "deposited",
              "type": "bool"
            }
          ],
          "internalType": "struct TokenInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uriPrefix",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uriSuffix",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "sig",
          "type": "bytes"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7d9bcbcc6264e1fd9181deab11b1ac1474fe025c7e3a23d6eb694ceb808c38f7",
  "receipt": {
    "to": null,
    "from": "0x7d14F396d347C960bC2774141D51DA59Be408F71",
    "contractAddress": "0x681fB126a179706282dCd5a20440EF281EA9a3e5",
    "transactionIndex": 50,
    "gasUsed": "2317070",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000001000000000000000000000000000000000000020000000000000000000800000000000000000000000000000040400000000000000000020000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000001000000000000000000000000000000000000000000000001000000000000",
    "blockHash": "0x53b8ff89438d9731bee0a47476c204b74652a59cf2609dd642ee43537c761e05",
    "transactionHash": "0x7d9bcbcc6264e1fd9181deab11b1ac1474fe025c7e3a23d6eb694ceb808c38f7",
    "logs": [
      {
        "transactionIndex": 50,
        "blockNumber": 7790473,
        "transactionHash": "0x7d9bcbcc6264e1fd9181deab11b1ac1474fe025c7e3a23d6eb694ceb808c38f7",
        "address": "0x681fB126a179706282dCd5a20440EF281EA9a3e5",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007d14f396d347c960bc2774141d51da59be408f71"
        ],
        "data": "0x",
        "logIndex": 298,
        "blockHash": "0x53b8ff89438d9731bee0a47476c204b74652a59cf2609dd642ee43537c761e05"
      }
    ],
    "blockNumber": 7790473,
    "cumulativeGasUsed": "15503736",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7d14F396d347C960bC2774141D51DA59Be408F71",
    3000
  ],
  "numDeployments": 2,
  "solcInputHash": "3160a4fc1e31e9de6f54fe75521272e9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_authSigner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"authSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uriPrefix\",\"type\":\"string\"}],\"name\":\"setUriPrefix\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uriSuffix\",\"type\":\"string\"}],\"name\":\"setUriSuffix\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deposited\",\"type\":\"bool\"}],\"internalType\":\"struct TokenInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uriPrefix\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uriSuffix\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DTKHero.sol\":\"DTKHero\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x0b606994df12f0ce35f6d2f6dcdde7e55e6899cdef7e00f180980caa81e3844e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../../security/Pausable.sol\\\";\\n\\n/**\\n * @dev ERC721 token with pausable token transfers, minting and burning.\\n *\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\n * period, or having an emergency switch for freezing all token transfers in the\\n * event of a large bug.\\n */\\nabstract contract ERC721Pausable is ERC721, Pausable {\\n    /**\\n     * @dev See {ERC721-_beforeTokenTransfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - the contract must not be paused.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        require(!paused(), \\\"ERC721Pausable: token transfer while paused\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xa2695a4c7b192f34b98a3875dfce54c8c6c4976b898a5598b1ce0355ce2e6c56\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/DTKHero.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n// import \\\"hardhat/console.sol\\\";\\n\\nstruct TokenInfo {\\n    uint256 tokenId;\\n    bool deposited;\\n}\\n\\ncontract DTKHero is ERC721, ERC721Pausable, Ownable {\\n    using Strings for uint256;\\n    using Counters for Counters.Counter;\\n\\n    // for mint control\\n    Counters.Counter private supply;\\n    uint256 public maxSupply;\\n\\n    // for signature control\\n    address public authSigner;\\n    mapping(address => mapping(uint256 => bool)) sigNonces; // all the nonces consumed by each address\\n\\n    // for deposit control\\n    mapping(uint256 => bool) depositedTokens;\\n\\n    // for metadata control\\n    string public uriPrefix = \\\"\\\";\\n    string public uriSuffix = \\\"\\\";\\n\\n    event Mint(\\n        address indexed minter,\\n        uint256 indexed tokenId,\\n        uint256 indexed nonce\\n    );\\n\\n    event Burn(address indexed owner, uint256 indexed tokenId);\\n\\n    event Deposit(\\n        address indexed owner,\\n        uint256 indexed tokenId,\\n        uint256 indexed nonce\\n    );\\n    event Withdraw(\\n        address indexed owner,\\n        uint256 indexed tokenId,\\n        uint256 indexed nonce\\n    );\\n\\n    constructor(address _authSigner, uint256 _maxSupply)\\n        ERC721(\\\"HeroMysteryBox\\\", \\\"HMB\\\")\\n    {\\n        require(_authSigner != address(0), \\\"Invalid addr\\\");\\n\\n        authSigner = _authSigner;\\n        maxSupply = _maxSupply;\\n    }\\n\\n    function splitSignature(bytes memory sig)\\n        internal\\n        pure\\n        returns (\\n            uint8,\\n            bytes32,\\n            bytes32\\n        )\\n    {\\n        require(sig.length == 65, \\\"Invalid signature\\\");\\n\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        assembly {\\n            r := mload(add(sig, 32))\\n            s := mload(add(sig, 64))\\n            v := byte(0, mload(add(sig, 96)))\\n        }\\n\\n        return (v, r, s);\\n    }\\n\\n    function prefixed(bytes32 hash) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash)\\n            );\\n    }\\n\\n    function recoverSigner(bytes32 message, bytes memory sig)\\n        internal\\n        pure\\n        returns (address)\\n    {\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n\\n        (v, r, s) = splitSignature(sig);\\n        return ecrecover(message, v, r, s);\\n    }\\n\\n    function _validateHash(\\n        string memory _methodIdentifier,\\n        address _address,\\n        uint256 _nonce,\\n        bytes memory sig\\n    ) internal view returns (bool) {\\n        bytes32 msgHash = prefixed(\\n            keccak256(\\n                abi.encodePacked(\\n                    _methodIdentifier,\\n                    address(this),\\n                    _address,\\n                    _nonce\\n                )\\n            )\\n        );\\n        return recoverSigner(msgHash, sig) == authSigner;\\n    }\\n\\n    function _validateHashWithTokenId(\\n        string memory _methodIdentifier,\\n        address _address,\\n        uint256 _tokenId,\\n        uint256 _nonce,\\n        bytes memory sig\\n    ) internal view returns (bool) {\\n        bytes32 msgHash = prefixed(\\n            keccak256(\\n                abi.encodePacked(\\n                    _methodIdentifier,\\n                    address(this),\\n                    _address,\\n                    _tokenId,\\n                    _nonce\\n                )\\n            )\\n        );\\n        return recoverSigner(msgHash, sig) == authSigner;\\n    }\\n\\n    function _baseURI() internal view virtual override returns (string memory) {\\n        return uriPrefix;\\n    }\\n\\n    function totalSupply() public view returns (uint256) {\\n        return supply.current();\\n    }\\n\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (string memory)\\n    {\\n        _requireMinted(tokenId);\\n\\n        string memory currentBaseURI = _baseURI();\\n        return\\n            bytes(currentBaseURI).length > 0\\n                ? string(\\n                    abi.encodePacked(\\n                        currentBaseURI,\\n                        tokenId.toString(),\\n                        uriSuffix\\n                    )\\n                )\\n                : \\\"\\\";\\n    }\\n\\n    function tokensOfOwner(address owner)\\n        public\\n        view\\n        returns (TokenInfo[] memory)\\n    {\\n        uint256 ownerTokenCount = balanceOf(owner);\\n        TokenInfo[] memory ownedTokens = new TokenInfo[](ownerTokenCount);\\n        uint256 currentTokenId = 1;\\n        uint256 ownedTokenIndex = 0;\\n        while (\\n            ownedTokenIndex < ownerTokenCount && currentTokenId <= totalSupply()\\n        ) {\\n            if (_exists(currentTokenId)) {\\n                address currentTokenOwner = ownerOf(currentTokenId);\\n\\n                if (currentTokenOwner == owner) {\\n                    ownedTokens[ownedTokenIndex].tokenId = currentTokenId;\\n                    ownedTokens[ownedTokenIndex].deposited = depositedTokens[\\n                        currentTokenId\\n                    ];\\n\\n                    ownedTokenIndex++;\\n                }\\n            }\\n            currentTokenId++;\\n        }\\n        return ownedTokens;\\n    }\\n\\n    function setUriPrefix(string memory _uriPrefix) public onlyOwner {\\n        uriPrefix = _uriPrefix;\\n    }\\n\\n    function setUriSuffix(string memory _uriSuffix) public onlyOwner {\\n        uriSuffix = _uriSuffix;\\n    }\\n\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public override {\\n        require(!depositedTokens[tokenId], \\\"Token has been deposited\\\");\\n        super.transferFrom(from, to, tokenId);\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public override {\\n        require(!depositedTokens[tokenId], \\\"Token has been deposited\\\");\\n        super.safeTransferFrom(from, to, tokenId);\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(!depositedTokens[tokenId], \\\"Token has been deposited\\\");\\n        super._safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    modifier mintCompliance(\\n        address minter,\\n        uint256 nonce,\\n        bytes memory sig\\n    ) {\\n        _requireNotPaused();\\n        require(!sigNonces[minter][nonce], \\\"nonce already consumed\\\");\\n\\n        require(\\n            _validateHash(\\\"mint(uint256,uint256,bytes)\\\", minter, nonce, sig),\\n            \\\"Invalid signature\\\"\\n        );\\n        require(supply.current() + 1 <= maxSupply, \\\"Max supply exceeded!\\\");\\n        _;\\n    }\\n\\n    function mint(uint256 nonce, bytes memory sig)\\n        public\\n        mintCompliance(_msgSender(), nonce, sig)\\n    {\\n        super._safeMint(_msgSender(), supply.current());\\n\\n        sigNonces[_msgSender()][nonce] = true;\\n        emit Mint(_msgSender(), supply.current(), nonce);\\n        supply.increment();\\n    }\\n\\n    modifier burnCompliance(uint256 tokenId) {\\n        _requireNotPaused();\\n        _requireMinted(tokenId);\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"Unauthorized\\\");\\n        require(!depositedTokens[tokenId], \\\"Token has been deposited\\\");\\n        _;\\n    }\\n\\n    function burn(uint256 tokenId) public burnCompliance(tokenId) {\\n        super._burn(tokenId);\\n        emit Burn(_msgSender(), tokenId);\\n        supply.decrement();\\n    }\\n\\n    modifier depositCompliance(\\n        uint256 tokenId,\\n        address wallet,\\n        uint256 nonce,\\n        bytes memory sig\\n    ) {\\n        _requireNotPaused();\\n        _requireMinted(tokenId);\\n        require(_isApprovedOrOwner(wallet, tokenId), \\\"Unauthorized\\\");\\n        require(!depositedTokens[tokenId], \\\"Token has been deposited\\\");\\n        require(!sigNonces[wallet][nonce], \\\"nonce already consumed\\\");\\n\\n        require(\\n            _validateHashWithTokenId(\\n                \\\"deposit(uint256,uint256,bytes)\\\",\\n                wallet,\\n                tokenId,\\n                nonce,\\n                sig\\n            ),\\n            \\\"Invalid signature\\\"\\n        );\\n        _;\\n    }\\n\\n    function deposit(\\n        uint256 tokenId,\\n        uint256 _nonce,\\n        bytes memory sig\\n    ) external depositCompliance(tokenId, _msgSender(), _nonce, sig) {\\n        sigNonces[_msgSender()][_nonce] = true;\\n        depositedTokens[tokenId] = true;\\n        emit Deposit(_msgSender(), tokenId, _nonce);\\n    }\\n\\n    modifier withdrawCompliance(\\n        uint256 tokenId,\\n        address wallet,\\n        uint256 nonce,\\n        bytes memory sig\\n    ) {\\n        _requireNotPaused();\\n        _requireMinted(tokenId);\\n        require(_isApprovedOrOwner(wallet, tokenId), \\\"Unauthorized\\\");\\n        require(depositedTokens[tokenId], \\\"Token has not been deposited\\\");\\n        require(!sigNonces[wallet][nonce], \\\"nonce already consumed\\\");\\n\\n        require(\\n            _validateHashWithTokenId(\\n                \\\"withdraw(uint256,uint256,bytes)\\\",\\n                wallet,\\n                tokenId,\\n                nonce,\\n                sig\\n            ),\\n            \\\"Invalid signature\\\"\\n        );\\n        _;\\n    }\\n\\n    function withdraw(\\n        uint256 tokenId,\\n        uint256 _nonce,\\n        bytes memory sig\\n    ) external withdrawCompliance(tokenId, _msgSender(), _nonce, sig) {\\n        sigNonces[_msgSender()][_nonce] = true;\\n        depositedTokens[tokenId] = false;\\n        emit Withdraw(_msgSender(), tokenId, _nonce);\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal override(ERC721, ERC721Pausable) {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0xad828cd6988d8a35cab9a7928959cd4ab6af0c95ebc04ea0d46848ce6102684b\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60a060405260006080908152600c906200001a908262000258565b50604080516020810190915260008152600d9062000039908262000258565b503480156200004757600080fd5b50604051620029fe380380620029fe8339810160408190526200006a9162000324565b6040518060400160405280600e81526020016d090cae4de9af2e6e8cae4f284def60931b815250604051806040016040528060038152602001622426a160e91b8152508160009081620000be919062000258565b506001620000cd828262000258565b50506006805460ff1916905550620000e53362000159565b6001600160a01b0382166200012f5760405162461bcd60e51b815260206004820152600c60248201526b24b73b30b634b21030b2323960a11b604482015260640160405180910390fd5b600980546001600160a01b0319166001600160a01b03939093169290921790915560085562000360565b600680546001600160a01b03838116610100818102610100600160a81b031985161790945560405193909204169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680620001de57607f821691505b602082108103620001ff57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200025357600081815260208120601f850160051c810160208610156200022e5750805b601f850160051c820191505b818110156200024f578281556001016200023a565b5050505b505050565b81516001600160401b03811115620002745762000274620001b3565b6200028c81620002858454620001c9565b8462000205565b602080601f831160018114620002c45760008415620002ab5750858301515b600019600386901b1c1916600185901b1785556200024f565b600085815260208120601f198616915b82811015620002f557888601518255948401946001909101908401620002d4565b5085821015620003145787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600080604083850312156200033857600080fd5b82516001600160a01b03811681146200035057600080fd5b6020939093015192949293505050565b61268e80620003706000396000f3fe608060405234801561001057600080fd5b50600436106101e55760003560e01c8063715018a61161010f578063aa0b7db7116100a2578063d5abeb0111610071578063d5abeb01146103e5578063db7fd408146103ee578063e985e9c514610401578063f2fde38b1461041457600080fd5b8063aa0b7db714610399578063b42348ac146103ac578063b88d4fde146103bf578063c87b56dd146103d257600080fd5b80638462151c116100de5780638462151c146103485780638da5cb5b1461036857806395d89b411461037e578063a22cb4651461038657600080fd5b8063715018a614610312578063744fb6ca1461031a5780637ec4a6591461032d5780638456cb591461034057600080fd5b80633f4ba83a116101875780635c975abb116101565780635c975abb146102d957806362b99ad4146102e45780636352211e146102ec57806370a08231146102ff57600080fd5b80633f4ba83a146102a357806342842e0e146102ab57806342966c68146102be5780635503a0e8146102d157600080fd5b8063095ea7b3116101c3578063095ea7b31461025257806316ba10e01461026757806318160ddd1461027a57806323b872dd1461029057600080fd5b806301ffc9a7146101ea57806306fdde0314610212578063081812fc14610227575b600080fd5b6101fd6101f8366004611de5565b610427565b60405190151581526020015b60405180910390f35b61021a610479565b6040516102099190611e52565b61023a610235366004611e65565b61050b565b6040516001600160a01b039091168152602001610209565b610265610260366004611e9a565b610532565b005b610265610275366004611f50565b61064c565b610282610664565b604051908152602001610209565b61026561029e366004611f99565b610674565b6102656106ae565b6102656102b9366004611f99565b6106c0565b6102656102cc366004611e65565b6106fa565b61021a6107a2565b60065460ff166101fd565b61021a610830565b61023a6102fa366004611e65565b61083d565b61028261030d366004611fd5565b61089d565b610265610923565b610265610328366004612010565b610935565b61026561033b366004611f50565b610adf565b610265610af3565b61035b610356366004611fd5565b610b03565b6040516102099190612060565b60065461010090046001600160a01b031661023a565b61021a610c62565b6102656103943660046120b1565b610c71565b6102656103a7366004612010565b610c7c565b60095461023a906001600160a01b031681565b6102656103cd3660046120ed565b610df9565b61021a6103e0366004611e65565b610e3a565b61028260085481565b6102656103fc366004612155565b610ea4565b6101fd61040f36600461219c565b611019565b610265610422366004611fd5565b611047565b60006001600160e01b031982166380ac58cd60e01b148061045857506001600160e01b03198216635b5e139f60e01b145b8061047357506301ffc9a760e01b6001600160e01b03198316145b92915050565b606060008054610488906121cf565b80601f01602080910402602001604051908101604052809291908181526020018280546104b4906121cf565b80156105015780601f106104d657610100808354040283529160200191610501565b820191906000526020600020905b8154815290600101906020018083116104e457829003601f168201915b5050505050905090565b6000610516826110c0565b506000908152600460205260409020546001600160a01b031690565b600061053d8261083d565b9050806001600160a01b0316836001600160a01b0316036105af5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b03821614806105cb57506105cb8133611019565b61063d5760405162461bcd60e51b815260206004820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c000060648201526084016105a6565b610647838361111f565b505050565b61065461118d565b600d6106608282612257565b5050565b600061066f60075490565b905090565b6000818152600b602052604090205460ff16156106a35760405162461bcd60e51b81526004016105a690612317565b6106478383836111ed565b6106b661118d565b6106be611264565b565b6000818152600b602052604090205460ff16156106ef5760405162461bcd60e51b81526004016105a690612317565b6106478383836112b6565b806107036112d1565b61070c816110c0565b610717335b82611317565b6107335760405162461bcd60e51b81526004016105a69061234e565b6000818152600b602052604090205460ff16156107625760405162461bcd60e51b81526004016105a690612317565b61076b82611376565b604051829033907fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca590600090a3610660600761141d565b600d80546107af906121cf565b80601f01602080910402602001604051908101604052809291908181526020018280546107db906121cf565b80156108285780601f106107fd57610100808354040283529160200191610828565b820191906000526020600020905b81548152906001019060200180831161080b57829003601f168201915b505050505081565b600c80546107af906121cf565b6000818152600260205260408120546001600160a01b0316806104735760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016105a6565b60006001600160a01b0382166109075760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b60648201526084016105a6565b506001600160a01b031660009081526003602052604090205490565b61092b61118d565b6106be6000611474565b823383836109416112d1565b61094a846110c0565b6109548385611317565b6109705760405162461bcd60e51b81526004016105a69061234e565b6000848152600b602052604090205460ff166109ce5760405162461bcd60e51b815260206004820152601c60248201527f546f6b656e20686173206e6f74206265656e206465706f73697465640000000060448201526064016105a6565b6001600160a01b0383166000908152600a6020908152604080832085845290915290205460ff1615610a125760405162461bcd60e51b81526004016105a690612374565b610a546040518060400160405280601f81526020017f77697468647261772875696e743235362c75696e743235362c62797465732900815250848685856114ce565b610a705760405162461bcd60e51b81526004016105a6906123a4565b336000818152600a602090815260408083208a845282528083208054600160ff19918216179091558b8452600b90925280832080549092169091555188928a9290917ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5689190a450505050505050565b610ae761118d565b600c6106608282612257565b610afb61118d565b6106be61157b565b60606000610b108361089d565b905060008167ffffffffffffffff811115610b2d57610b2d611ec4565b604051908082528060200260200182016040528015610b7257816020015b6040805180820190915260008082526020820152815260200190600190039081610b4b5790505b509050600160005b8381108015610b905750610b8c610664565b8211155b15610c58576000828152600260205260409020546001600160a01b031615610c46576000610bbd8361083d565b9050866001600160a01b0316816001600160a01b031603610c445782848381518110610beb57610beb6123cf565b602090810291909101810151919091526000848152600b9091526040902054845160ff90911690859084908110610c2457610c246123cf565b60209081029190910181015191151591015281610c40816123fb565b9250505b505b81610c50816123fb565b925050610b7a565b5090949350505050565b606060018054610488906121cf565b6106603383836115b8565b82338383610c886112d1565b610c91846110c0565b610c9b8385611317565b610cb75760405162461bcd60e51b81526004016105a69061234e565b6000848152600b602052604090205460ff1615610ce65760405162461bcd60e51b81526004016105a690612317565b6001600160a01b0383166000908152600a6020908152604080832085845290915290205460ff1615610d2a5760405162461bcd60e51b81526004016105a690612374565b610d6c6040518060400160405280601e81526020017f6465706f7369742875696e743235362c75696e743235362c6279746573290000815250848685856114ce565b610d885760405162461bcd60e51b81526004016105a6906123a4565b336000818152600a602090815260408083208a845282528083208054600160ff1991821681179092558c8552600b9093528184208054909316179091555188928a9290917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a159190a450505050505050565b6000828152600b602052604090205460ff1615610e285760405162461bcd60e51b81526004016105a690612317565b610e3484848484611686565b50505050565b6060610e45826110c0565b6000610e4f6116b9565b90506000815111610e6f5760405180602001604052806000815250610e9d565b80610e79846116c8565b600d604051602001610e8d93929190612414565b6040516020818303038152906040525b9392505050565b338282610eaf6112d1565b6001600160a01b0383166000908152600a6020908152604080832085845290915290205460ff1615610ef35760405162461bcd60e51b81526004016105a690612374565b610f346040518060400160405280601b81526020017f6d696e742875696e743235362c75696e743235362c62797465732900000000008152508484846117c9565b610f505760405162461bcd60e51b81526004016105a6906123a4565b600854600754610f619060016124b4565b1115610fa65760405162461bcd60e51b81526020600482015260146024820152734d617820737570706c792065786365656465642160601b60448201526064016105a6565b610fb233600754611813565b336000818152600a60209081526040808320898452909152808220805460ff191660011790556007549051889391927f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f91a4611012600780546001019055565b5050505050565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b61104f61118d565b6001600160a01b0381166110b45760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016105a6565b6110bd81611474565b50565b6000818152600260205260409020546001600160a01b03166110bd5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016105a6565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906111548261083d565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6006546001600160a01b036101009091041633146106be5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105a6565b6111f633610711565b6112595760405162461bcd60e51b815260206004820152602e60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201526d1c881b9bdc88185c1c1c9bdd995960921b60648201526084016105a6565b61064783838361182d565b61126c6119d4565b6006805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b61064783838360405180602001604052806000815250610df9565b60065460ff16156106be5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016105a6565b6000806113238361083d565b9050806001600160a01b0316846001600160a01b0316148061134a575061134a8185611019565b8061136e5750836001600160a01b03166113638461050b565b6001600160a01b0316145b949350505050565b60006113818261083d565b905061138f81600084611a1d565b61139a60008361111f565b6001600160a01b03811660009081526003602052604081208054600192906113c39084906124c7565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b80548061146c5760405162461bcd60e51b815260206004820152601b60248201527f436f756e7465723a2064656372656d656e74206f766572666c6f77000000000060448201526064016105a6565b600019019055565b600680546001600160a01b03838116610100818102610100600160a81b031985161790945560405193909204169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008061154d87308888886040516020016114ed9594939291906124da565b60408051601f1981840301815282825280516020918201207f19457468657265756d205369676e6564204d6573736167653a0a33320000000084830152603c8085019190915282518085039091018152605c909301909152815191012090565b6009549091506001600160a01b03166115668285611a28565b6001600160a01b031614979650505050505050565b6115836112d1565b6006805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586112993390565b816001600160a01b0316836001600160a01b0316036116195760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016105a6565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b61169184848461182d565b61169d84848484611aa7565b610e345760405162461bcd60e51b81526004016105a690612528565b6060600c8054610488906121cf565b6060816000036116ef5750506040805180820190915260018152600360fc1b602082015290565b8160005b81156117195780611703816123fb565b91506117129050600a83612590565b91506116f3565b60008167ffffffffffffffff81111561173457611734611ec4565b6040519080825280601f01601f19166020018201604052801561175e576020820181803683370190505b5090505b841561136e576117736001836124c7565b9150611780600a866125a4565b61178b9060306124b4565b60f81b8183815181106117a0576117a06123cf565b60200101906001600160f81b031916908160001a9053506117c2600a86612590565b9450611762565b6000806117e6863087876040516020016114ed94939291906125b8565b6009549091506001600160a01b03166117ff8285611a28565b6001600160a01b0316149695505050505050565b610660828260405180602001604052806000815250611ba5565b826001600160a01b03166118408261083d565b6001600160a01b0316146118a45760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b60648201526084016105a6565b6001600160a01b0382166119065760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016105a6565b611911838383611a1d565b61191c60008261111f565b6001600160a01b03831660009081526003602052604081208054600192906119459084906124c7565b90915550506001600160a01b03821660009081526003602052604081208054600192906119739084906124b4565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b60065460ff166106be5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016105a6565b610647838383611bd8565b600080600080611a3785611c3f565b6040805160008152602081018083528b905260ff8516918101919091526060810183905260808101829052929550909350915060019060a0016020604051602081039080840390855afa158015611a92573d6000803e3d6000fd5b5050604051601f190151979650505050505050565b60006001600160a01b0384163b15611b9d57604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611aeb9033908990889088906004016125fe565b6020604051808303816000875af1925050508015611b26575060408051601f3d908101601f19168201909252611b239181019061263b565b60015b611b83573d808015611b54576040519150601f19603f3d011682016040523d82523d6000602084013e611b59565b606091505b508051600003611b7b5760405162461bcd60e51b81526004016105a690612528565b805181602001fd5b6001600160e01b031916630a85bd0160e11b14905061136e565b50600161136e565b611baf8383611c81565b611bbc6000848484611aa7565b6106475760405162461bcd60e51b81526004016105a690612528565b60065460ff16156106475760405162461bcd60e51b815260206004820152602b60248201527f4552433732315061757361626c653a20746f6b656e207472616e73666572207760448201526a1a1a5b19481c185d5cd95960aa1b60648201526084016105a6565b60008060008351604114611c655760405162461bcd60e51b81526004016105a6906123a4565b5050506020810151604082015160609092015160001a92909190565b6001600160a01b038216611cd75760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016105a6565b6000818152600260205260409020546001600160a01b031615611d3c5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016105a6565b611d4860008383611a1d565b6001600160a01b0382166000908152600360205260408120805460019290611d719084906124b4565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6001600160e01b0319811681146110bd57600080fd5b600060208284031215611df757600080fd5b8135610e9d81611dcf565b60005b83811015611e1d578181015183820152602001611e05565b50506000910152565b60008151808452611e3e816020860160208601611e02565b601f01601f19169290920160200192915050565b602081526000610e9d6020830184611e26565b600060208284031215611e7757600080fd5b5035919050565b80356001600160a01b0381168114611e9557600080fd5b919050565b60008060408385031215611ead57600080fd5b611eb683611e7e565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff80841115611ef557611ef5611ec4565b604051601f8501601f19908116603f01168101908282118183101715611f1d57611f1d611ec4565b81604052809350858152868686011115611f3657600080fd5b858560208301376000602087830101525050509392505050565b600060208284031215611f6257600080fd5b813567ffffffffffffffff811115611f7957600080fd5b8201601f81018413611f8a57600080fd5b61136e84823560208401611eda565b600080600060608486031215611fae57600080fd5b611fb784611e7e565b9250611fc560208501611e7e565b9150604084013590509250925092565b600060208284031215611fe757600080fd5b610e9d82611e7e565b600082601f83011261200157600080fd5b610e9d83833560208501611eda565b60008060006060848603121561202557600080fd5b8335925060208401359150604084013567ffffffffffffffff81111561204a57600080fd5b61205686828701611ff0565b9150509250925092565b602080825282518282018190526000919060409081850190868401855b828110156120a457815180518552860151151586850152928401929085019060010161207d565b5091979650505050505050565b600080604083850312156120c457600080fd5b6120cd83611e7e565b9150602083013580151581146120e257600080fd5b809150509250929050565b6000806000806080858703121561210357600080fd5b61210c85611e7e565b935061211a60208601611e7e565b925060408501359150606085013567ffffffffffffffff81111561213d57600080fd5b61214987828801611ff0565b91505092959194509250565b6000806040838503121561216857600080fd5b82359150602083013567ffffffffffffffff81111561218657600080fd5b61219285828601611ff0565b9150509250929050565b600080604083850312156121af57600080fd5b6121b883611e7e565b91506121c660208401611e7e565b90509250929050565b600181811c908216806121e357607f821691505b60208210810361220357634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561064757600081815260208120601f850160051c810160208610156122305750805b601f850160051c820191505b8181101561224f5782815560010161223c565b505050505050565b815167ffffffffffffffff81111561227157612271611ec4565b6122858161227f84546121cf565b84612209565b602080601f8311600181146122ba57600084156122a25750858301515b600019600386901b1c1916600185901b17855561224f565b600085815260208120601f198616915b828110156122e9578886015182559484019460019091019084016122ca565b50858210156123075787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60208082526018908201527f546f6b656e20686173206265656e206465706f73697465640000000000000000604082015260600190565b6020808252600c908201526b155b985d5d1a1bdc9a5e995960a21b604082015260600190565b6020808252601690820152751b9bdb98d948185b1c9958591e4818dbdb9cdd5b595960521b604082015260600190565b602080825260119082015270496e76616c6964207369676e617475726560781b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161240d5761240d6123e5565b5060010190565b6000845160206124278285838a01611e02565b85519184019161243a8184848a01611e02565b855492019160009061244b816121cf565b600182811680156124635760018114612478576124a4565b60ff19841687528215158302870194506124a4565b896000528560002060005b8481101561249c57815489820152908301908701612483565b505082870194505b50929a9950505050505050505050565b80820180821115610473576104736123e5565b81810381811115610473576104736123e5565b600086516124ec818460208b01611e02565b6bffffffffffffffffffffffff19606097881b8116919093019081529490951b1660148401526028830191909152604882015260680192915050565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b634e487b7160e01b600052601260045260246000fd5b60008261259f5761259f61257a565b500490565b6000826125b3576125b361257a565b500690565b600085516125ca818460208a01611e02565b6bffffffffffffffffffffffff19606096871b8116919093019081529390941b166014830152602882015260480192915050565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061263190830184611e26565b9695505050505050565b60006020828403121561264d57600080fd5b8151610e9d81611dcf56fea264697066735822122026bfea7e09db3ed78a789c325cf1683e74447c14d92177fcd1537a5dde20544a64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101e55760003560e01c8063715018a61161010f578063aa0b7db7116100a2578063d5abeb0111610071578063d5abeb01146103e5578063db7fd408146103ee578063e985e9c514610401578063f2fde38b1461041457600080fd5b8063aa0b7db714610399578063b42348ac146103ac578063b88d4fde146103bf578063c87b56dd146103d257600080fd5b80638462151c116100de5780638462151c146103485780638da5cb5b1461036857806395d89b411461037e578063a22cb4651461038657600080fd5b8063715018a614610312578063744fb6ca1461031a5780637ec4a6591461032d5780638456cb591461034057600080fd5b80633f4ba83a116101875780635c975abb116101565780635c975abb146102d957806362b99ad4146102e45780636352211e146102ec57806370a08231146102ff57600080fd5b80633f4ba83a146102a357806342842e0e146102ab57806342966c68146102be5780635503a0e8146102d157600080fd5b8063095ea7b3116101c3578063095ea7b31461025257806316ba10e01461026757806318160ddd1461027a57806323b872dd1461029057600080fd5b806301ffc9a7146101ea57806306fdde0314610212578063081812fc14610227575b600080fd5b6101fd6101f8366004611de5565b610427565b60405190151581526020015b60405180910390f35b61021a610479565b6040516102099190611e52565b61023a610235366004611e65565b61050b565b6040516001600160a01b039091168152602001610209565b610265610260366004611e9a565b610532565b005b610265610275366004611f50565b61064c565b610282610664565b604051908152602001610209565b61026561029e366004611f99565b610674565b6102656106ae565b6102656102b9366004611f99565b6106c0565b6102656102cc366004611e65565b6106fa565b61021a6107a2565b60065460ff166101fd565b61021a610830565b61023a6102fa366004611e65565b61083d565b61028261030d366004611fd5565b61089d565b610265610923565b610265610328366004612010565b610935565b61026561033b366004611f50565b610adf565b610265610af3565b61035b610356366004611fd5565b610b03565b6040516102099190612060565b60065461010090046001600160a01b031661023a565b61021a610c62565b6102656103943660046120b1565b610c71565b6102656103a7366004612010565b610c7c565b60095461023a906001600160a01b031681565b6102656103cd3660046120ed565b610df9565b61021a6103e0366004611e65565b610e3a565b61028260085481565b6102656103fc366004612155565b610ea4565b6101fd61040f36600461219c565b611019565b610265610422366004611fd5565b611047565b60006001600160e01b031982166380ac58cd60e01b148061045857506001600160e01b03198216635b5e139f60e01b145b8061047357506301ffc9a760e01b6001600160e01b03198316145b92915050565b606060008054610488906121cf565b80601f01602080910402602001604051908101604052809291908181526020018280546104b4906121cf565b80156105015780601f106104d657610100808354040283529160200191610501565b820191906000526020600020905b8154815290600101906020018083116104e457829003601f168201915b5050505050905090565b6000610516826110c0565b506000908152600460205260409020546001600160a01b031690565b600061053d8261083d565b9050806001600160a01b0316836001600160a01b0316036105af5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b03821614806105cb57506105cb8133611019565b61063d5760405162461bcd60e51b815260206004820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c000060648201526084016105a6565b610647838361111f565b505050565b61065461118d565b600d6106608282612257565b5050565b600061066f60075490565b905090565b6000818152600b602052604090205460ff16156106a35760405162461bcd60e51b81526004016105a690612317565b6106478383836111ed565b6106b661118d565b6106be611264565b565b6000818152600b602052604090205460ff16156106ef5760405162461bcd60e51b81526004016105a690612317565b6106478383836112b6565b806107036112d1565b61070c816110c0565b610717335b82611317565b6107335760405162461bcd60e51b81526004016105a69061234e565b6000818152600b602052604090205460ff16156107625760405162461bcd60e51b81526004016105a690612317565b61076b82611376565b604051829033907fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca590600090a3610660600761141d565b600d80546107af906121cf565b80601f01602080910402602001604051908101604052809291908181526020018280546107db906121cf565b80156108285780601f106107fd57610100808354040283529160200191610828565b820191906000526020600020905b81548152906001019060200180831161080b57829003601f168201915b505050505081565b600c80546107af906121cf565b6000818152600260205260408120546001600160a01b0316806104735760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016105a6565b60006001600160a01b0382166109075760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b60648201526084016105a6565b506001600160a01b031660009081526003602052604090205490565b61092b61118d565b6106be6000611474565b823383836109416112d1565b61094a846110c0565b6109548385611317565b6109705760405162461bcd60e51b81526004016105a69061234e565b6000848152600b602052604090205460ff166109ce5760405162461bcd60e51b815260206004820152601c60248201527f546f6b656e20686173206e6f74206265656e206465706f73697465640000000060448201526064016105a6565b6001600160a01b0383166000908152600a6020908152604080832085845290915290205460ff1615610a125760405162461bcd60e51b81526004016105a690612374565b610a546040518060400160405280601f81526020017f77697468647261772875696e743235362c75696e743235362c62797465732900815250848685856114ce565b610a705760405162461bcd60e51b81526004016105a6906123a4565b336000818152600a602090815260408083208a845282528083208054600160ff19918216179091558b8452600b90925280832080549092169091555188928a9290917ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5689190a450505050505050565b610ae761118d565b600c6106608282612257565b610afb61118d565b6106be61157b565b60606000610b108361089d565b905060008167ffffffffffffffff811115610b2d57610b2d611ec4565b604051908082528060200260200182016040528015610b7257816020015b6040805180820190915260008082526020820152815260200190600190039081610b4b5790505b509050600160005b8381108015610b905750610b8c610664565b8211155b15610c58576000828152600260205260409020546001600160a01b031615610c46576000610bbd8361083d565b9050866001600160a01b0316816001600160a01b031603610c445782848381518110610beb57610beb6123cf565b602090810291909101810151919091526000848152600b9091526040902054845160ff90911690859084908110610c2457610c246123cf565b60209081029190910181015191151591015281610c40816123fb565b9250505b505b81610c50816123fb565b925050610b7a565b5090949350505050565b606060018054610488906121cf565b6106603383836115b8565b82338383610c886112d1565b610c91846110c0565b610c9b8385611317565b610cb75760405162461bcd60e51b81526004016105a69061234e565b6000848152600b602052604090205460ff1615610ce65760405162461bcd60e51b81526004016105a690612317565b6001600160a01b0383166000908152600a6020908152604080832085845290915290205460ff1615610d2a5760405162461bcd60e51b81526004016105a690612374565b610d6c6040518060400160405280601e81526020017f6465706f7369742875696e743235362c75696e743235362c6279746573290000815250848685856114ce565b610d885760405162461bcd60e51b81526004016105a6906123a4565b336000818152600a602090815260408083208a845282528083208054600160ff1991821681179092558c8552600b9093528184208054909316179091555188928a9290917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a159190a450505050505050565b6000828152600b602052604090205460ff1615610e285760405162461bcd60e51b81526004016105a690612317565b610e3484848484611686565b50505050565b6060610e45826110c0565b6000610e4f6116b9565b90506000815111610e6f5760405180602001604052806000815250610e9d565b80610e79846116c8565b600d604051602001610e8d93929190612414565b6040516020818303038152906040525b9392505050565b338282610eaf6112d1565b6001600160a01b0383166000908152600a6020908152604080832085845290915290205460ff1615610ef35760405162461bcd60e51b81526004016105a690612374565b610f346040518060400160405280601b81526020017f6d696e742875696e743235362c75696e743235362c62797465732900000000008152508484846117c9565b610f505760405162461bcd60e51b81526004016105a6906123a4565b600854600754610f619060016124b4565b1115610fa65760405162461bcd60e51b81526020600482015260146024820152734d617820737570706c792065786365656465642160601b60448201526064016105a6565b610fb233600754611813565b336000818152600a60209081526040808320898452909152808220805460ff191660011790556007549051889391927f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f91a4611012600780546001019055565b5050505050565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b61104f61118d565b6001600160a01b0381166110b45760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016105a6565b6110bd81611474565b50565b6000818152600260205260409020546001600160a01b03166110bd5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016105a6565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906111548261083d565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6006546001600160a01b036101009091041633146106be5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105a6565b6111f633610711565b6112595760405162461bcd60e51b815260206004820152602e60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201526d1c881b9bdc88185c1c1c9bdd995960921b60648201526084016105a6565b61064783838361182d565b61126c6119d4565b6006805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b61064783838360405180602001604052806000815250610df9565b60065460ff16156106be5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016105a6565b6000806113238361083d565b9050806001600160a01b0316846001600160a01b0316148061134a575061134a8185611019565b8061136e5750836001600160a01b03166113638461050b565b6001600160a01b0316145b949350505050565b60006113818261083d565b905061138f81600084611a1d565b61139a60008361111f565b6001600160a01b03811660009081526003602052604081208054600192906113c39084906124c7565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b80548061146c5760405162461bcd60e51b815260206004820152601b60248201527f436f756e7465723a2064656372656d656e74206f766572666c6f77000000000060448201526064016105a6565b600019019055565b600680546001600160a01b03838116610100818102610100600160a81b031985161790945560405193909204169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008061154d87308888886040516020016114ed9594939291906124da565b60408051601f1981840301815282825280516020918201207f19457468657265756d205369676e6564204d6573736167653a0a33320000000084830152603c8085019190915282518085039091018152605c909301909152815191012090565b6009549091506001600160a01b03166115668285611a28565b6001600160a01b031614979650505050505050565b6115836112d1565b6006805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586112993390565b816001600160a01b0316836001600160a01b0316036116195760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016105a6565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b61169184848461182d565b61169d84848484611aa7565b610e345760405162461bcd60e51b81526004016105a690612528565b6060600c8054610488906121cf565b6060816000036116ef5750506040805180820190915260018152600360fc1b602082015290565b8160005b81156117195780611703816123fb565b91506117129050600a83612590565b91506116f3565b60008167ffffffffffffffff81111561173457611734611ec4565b6040519080825280601f01601f19166020018201604052801561175e576020820181803683370190505b5090505b841561136e576117736001836124c7565b9150611780600a866125a4565b61178b9060306124b4565b60f81b8183815181106117a0576117a06123cf565b60200101906001600160f81b031916908160001a9053506117c2600a86612590565b9450611762565b6000806117e6863087876040516020016114ed94939291906125b8565b6009549091506001600160a01b03166117ff8285611a28565b6001600160a01b0316149695505050505050565b610660828260405180602001604052806000815250611ba5565b826001600160a01b03166118408261083d565b6001600160a01b0316146118a45760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b60648201526084016105a6565b6001600160a01b0382166119065760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016105a6565b611911838383611a1d565b61191c60008261111f565b6001600160a01b03831660009081526003602052604081208054600192906119459084906124c7565b90915550506001600160a01b03821660009081526003602052604081208054600192906119739084906124b4565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b60065460ff166106be5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016105a6565b610647838383611bd8565b600080600080611a3785611c3f565b6040805160008152602081018083528b905260ff8516918101919091526060810183905260808101829052929550909350915060019060a0016020604051602081039080840390855afa158015611a92573d6000803e3d6000fd5b5050604051601f190151979650505050505050565b60006001600160a01b0384163b15611b9d57604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611aeb9033908990889088906004016125fe565b6020604051808303816000875af1925050508015611b26575060408051601f3d908101601f19168201909252611b239181019061263b565b60015b611b83573d808015611b54576040519150601f19603f3d011682016040523d82523d6000602084013e611b59565b606091505b508051600003611b7b5760405162461bcd60e51b81526004016105a690612528565b805181602001fd5b6001600160e01b031916630a85bd0160e11b14905061136e565b50600161136e565b611baf8383611c81565b611bbc6000848484611aa7565b6106475760405162461bcd60e51b81526004016105a690612528565b60065460ff16156106475760405162461bcd60e51b815260206004820152602b60248201527f4552433732315061757361626c653a20746f6b656e207472616e73666572207760448201526a1a1a5b19481c185d5cd95960aa1b60648201526084016105a6565b60008060008351604114611c655760405162461bcd60e51b81526004016105a6906123a4565b5050506020810151604082015160609092015160001a92909190565b6001600160a01b038216611cd75760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016105a6565b6000818152600260205260409020546001600160a01b031615611d3c5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016105a6565b611d4860008383611a1d565b6001600160a01b0382166000908152600360205260408120805460019290611d719084906124b4565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6001600160e01b0319811681146110bd57600080fd5b600060208284031215611df757600080fd5b8135610e9d81611dcf565b60005b83811015611e1d578181015183820152602001611e05565b50506000910152565b60008151808452611e3e816020860160208601611e02565b601f01601f19169290920160200192915050565b602081526000610e9d6020830184611e26565b600060208284031215611e7757600080fd5b5035919050565b80356001600160a01b0381168114611e9557600080fd5b919050565b60008060408385031215611ead57600080fd5b611eb683611e7e565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff80841115611ef557611ef5611ec4565b604051601f8501601f19908116603f01168101908282118183101715611f1d57611f1d611ec4565b81604052809350858152868686011115611f3657600080fd5b858560208301376000602087830101525050509392505050565b600060208284031215611f6257600080fd5b813567ffffffffffffffff811115611f7957600080fd5b8201601f81018413611f8a57600080fd5b61136e84823560208401611eda565b600080600060608486031215611fae57600080fd5b611fb784611e7e565b9250611fc560208501611e7e565b9150604084013590509250925092565b600060208284031215611fe757600080fd5b610e9d82611e7e565b600082601f83011261200157600080fd5b610e9d83833560208501611eda565b60008060006060848603121561202557600080fd5b8335925060208401359150604084013567ffffffffffffffff81111561204a57600080fd5b61205686828701611ff0565b9150509250925092565b602080825282518282018190526000919060409081850190868401855b828110156120a457815180518552860151151586850152928401929085019060010161207d565b5091979650505050505050565b600080604083850312156120c457600080fd5b6120cd83611e7e565b9150602083013580151581146120e257600080fd5b809150509250929050565b6000806000806080858703121561210357600080fd5b61210c85611e7e565b935061211a60208601611e7e565b925060408501359150606085013567ffffffffffffffff81111561213d57600080fd5b61214987828801611ff0565b91505092959194509250565b6000806040838503121561216857600080fd5b82359150602083013567ffffffffffffffff81111561218657600080fd5b61219285828601611ff0565b9150509250929050565b600080604083850312156121af57600080fd5b6121b883611e7e565b91506121c660208401611e7e565b90509250929050565b600181811c908216806121e357607f821691505b60208210810361220357634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561064757600081815260208120601f850160051c810160208610156122305750805b601f850160051c820191505b8181101561224f5782815560010161223c565b505050505050565b815167ffffffffffffffff81111561227157612271611ec4565b6122858161227f84546121cf565b84612209565b602080601f8311600181146122ba57600084156122a25750858301515b600019600386901b1c1916600185901b17855561224f565b600085815260208120601f198616915b828110156122e9578886015182559484019460019091019084016122ca565b50858210156123075787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60208082526018908201527f546f6b656e20686173206265656e206465706f73697465640000000000000000604082015260600190565b6020808252600c908201526b155b985d5d1a1bdc9a5e995960a21b604082015260600190565b6020808252601690820152751b9bdb98d948185b1c9958591e4818dbdb9cdd5b595960521b604082015260600190565b602080825260119082015270496e76616c6964207369676e617475726560781b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161240d5761240d6123e5565b5060010190565b6000845160206124278285838a01611e02565b85519184019161243a8184848a01611e02565b855492019160009061244b816121cf565b600182811680156124635760018114612478576124a4565b60ff19841687528215158302870194506124a4565b896000528560002060005b8481101561249c57815489820152908301908701612483565b505082870194505b50929a9950505050505050505050565b80820180821115610473576104736123e5565b81810381811115610473576104736123e5565b600086516124ec818460208b01611e02565b6bffffffffffffffffffffffff19606097881b8116919093019081529490951b1660148401526028830191909152604882015260680192915050565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b634e487b7160e01b600052601260045260246000fd5b60008261259f5761259f61257a565b500490565b6000826125b3576125b361257a565b500690565b600085516125ca818460208a01611e02565b6bffffffffffffffffffffffff19606096871b8116919093019081529390941b166014830152602882015260480192915050565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061263190830184611e26565b9695505050505050565b60006020828403121561264d57600080fd5b8151610e9d81611dcf56fea264697066735822122026bfea7e09db3ed78a789c325cf1683e74447c14d92177fcd1537a5dde20544a64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 246,
        "contract": "contracts/DTKHero.sol:DTKHero",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 248,
        "contract": "contracts/DTKHero.sol:DTKHero",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 252,
        "contract": "contracts/DTKHero.sol:DTKHero",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 256,
        "contract": "contracts/DTKHero.sol:DTKHero",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 260,
        "contract": "contracts/DTKHero.sol:DTKHero",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 266,
        "contract": "contracts/DTKHero.sol:DTKHero",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 130,
        "contract": "contracts/DTKHero.sol:DTKHero",
        "label": "_paused",
        "offset": 0,
        "slot": "6",
        "type": "t_bool"
      },
      {
        "astId": 7,
        "contract": "contracts/DTKHero.sol:DTKHero",
        "label": "_owner",
        "offset": 1,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 1965,
        "contract": "contracts/DTKHero.sol:DTKHero",
        "label": "supply",
        "offset": 0,
        "slot": "7",
        "type": "t_struct(Counter)1608_storage"
      },
      {
        "astId": 1967,
        "contract": "contracts/DTKHero.sol:DTKHero",
        "label": "maxSupply",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 1969,
        "contract": "contracts/DTKHero.sol:DTKHero",
        "label": "authSigner",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 1975,
        "contract": "contracts/DTKHero.sol:DTKHero",
        "label": "sigNonces",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 1979,
        "contract": "contracts/DTKHero.sol:DTKHero",
        "label": "depositedTokens",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 1982,
        "contract": "contracts/DTKHero.sol:DTKHero",
        "label": "uriPrefix",
        "offset": 0,
        "slot": "12",
        "type": "t_string_storage"
      },
      {
        "astId": 1985,
        "contract": "contracts/DTKHero.sol:DTKHero",
        "label": "uriSuffix",
        "offset": 0,
        "slot": "13",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)1608_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 1607,
            "contract": "contracts/DTKHero.sol:DTKHero",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}